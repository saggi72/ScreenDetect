# ScreenDetect Yolo _ Open CV
# -*- coding: utf-8 -*-
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QFileDialog, QLabel, QGraphicsView, QGraphicsScene,
                             QMessageBox, QWidget, QTextEdit, QSizePolicy,
                             QSpinBox, QDoubleSpinBox, QComboBox, QPushButton,
                             QGroupBox)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
import cv2
import numpy as np
import sys
import os
import time
import json
from queue import Queue, Empty
import traceback
import serial
import serial.tools.list_ports
from enum import Enum, auto

# --- Th·ª≠ import YOLOv8 ---
try:
    from ultralytics import YOLO
    YOLO_AVAILABLE = True
except ImportError:
    YOLO = None
    YOLO_AVAILABLE = False
    # In c·∫£nh b√°o ra console m·ªôt l·∫ßn khi kh·ªüi ƒë·ªông
    print("WARNING: Th∆∞ vi·ªán 'ultralytics' (YOLOv8) ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ch·ª©c nƒÉng YOLO s·∫Ω b·ªã v√¥ hi·ªáu h√≥a.")
    print("         Vui l√≤ng c√†i ƒë·∫∑t b·∫±ng l·ªánh: pip install ultralytics")

# --- H·∫±ng s·ªë ---
METHOD_SSIM = "OpenCV SSIM"
METHOD_YOLO = "YOLOv8 Detection"

class ComparisonStatus(Enum):
    NORMAL = auto()
    SHUTDOWN = auto()
    FAIL = auto()
    UNKNOWN = auto()
    ERROR = auto()

STATUS_MAP = {
    ComparisonStatus.NORMAL: {"label": "Normal", "color": "lightgreen", "log_prefix": "‚úÖ", "serial": "Norm"},
    ComparisonStatus.SHUTDOWN: {"label": "Shutdown", "color": "lightblue", "log_prefix": "‚ÑπÔ∏è", "serial": "Shutdown"},
    ComparisonStatus.FAIL: {"label": "FAIL!", "color": "red", "log_prefix": "‚ùå", "serial": "Fail"},
    ComparisonStatus.UNKNOWN: {"label": "Unknown Mismatch", "color": "orange", "log_prefix": "‚ö†Ô∏è", "serial": None},
    ComparisonStatus.ERROR: {"label": "Comparison Error", "color": "magenta", "log_prefix": "üí•", "serial": None},
}

REF_NORM = "Norm"
REF_SHUTDOWN = "Shutdown"
REF_FAIL = "Fail"
DEFAULT_SSIM_THRESHOLD = 0.90
DEFAULT_ERROR_COOLDOWN = 15
DEFAULT_RUNTIME_MINUTES = 0
DEFAULT_RECORD_ON_ERROR = False
DEFAULT_SERIAL_ENABLED = False
DEFAULT_BAUD_RATE = 9600
CONFIG_FILE_NAME = "image_checker_config.json"
LOG_FILE_NAME = "activity_log.txt"
VIDEO_SUBFOLDER = "error_videos"
COMMON_BAUD_RATES = [9600, 19200, 38400, 57600, 115200]
DEFAULT_COMPARISON_METHOD = METHOD_SSIM
DEFAULT_YOLO_CONFIDENCE = 0.5

# --- H√†m SSIM ---
def ssim_opencv(img1, img2, K1=0.01, K2=0.03, win_size=7, data_range=255.0):
    if img1 is None or img2 is None: return None
    try:
        if len(img1.shape) > 2: img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
        if len(img2.shape) > 2: img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)

        if img1.shape != img2.shape:
            h1, w1 = img1.shape[:2]
            h2, w2 = img2.shape[:2]
            interpolation = cv2.INTER_AREA if (w2 > w1 or h2 > h1) else cv2.INTER_LINEAR
            img2 = cv2.resize(img2, (w1, h1), interpolation=interpolation)
            if img2 is None or img2.shape != (h1, w1):
                print("Warning: SSIM resize failed")
                return None

        h, w = img1.shape
        win_size = min(win_size, h, w)
        if win_size % 2 == 0: win_size -= 1
        win_size = max(3, win_size)
        if h < win_size or w < win_size: return None

        if img1.dtype != np.float64: img1 = img1.astype(np.float64)
        if img2.dtype != np.float64: img2 = img2.astype(np.float64)

        C1 = (K1 * data_range)**2
        C2 = (K2 * data_range)**2
        sigma = 1.5
        mu1 = cv2.GaussianBlur(img1, (win_size, win_size), sigma)
        mu2 = cv2.GaussianBlur(img2, (win_size, win_size), sigma)
        mu1_sq = mu1 * mu1
        mu2_sq = mu2 * mu2
        mu1_mu2 = mu1 * mu2
        sigma1_sq = cv2.GaussianBlur(img1 * img1, (win_size, win_size), sigma) - mu1_sq
        sigma2_sq = cv2.GaussianBlur(img2 * img2, (win_size, win_size), sigma) - mu2_sq
        sigma12 = cv2.GaussianBlur(img1 * img2, (win_size, win_size), sigma) - mu1_mu2
        numerator = (2 * mu1_mu2 + C1) * (2 * sigma12 + C2)
        denominator = (mu1_sq + mu2_sq + C1) * (sigma1_sq + sigma2_sq + C2)
        ssim_map = numerator / (denominator + 1e-8)
        ssim_map = np.clip(ssim_map, 0, 1)
        mssim = np.mean(ssim_map)
        if not np.isfinite(mssim): return None
        return mssim

    except cv2.error as cv_err:
        print(f"OpenCV Error in SSIM: {cv_err}")
        return None
    except Exception as e:
        print(f"General Error in SSIM: {e}")
        traceback.print_exc()
        return None

# --- Worker Thread ---
class ProcessingWorker(QThread):
    log_signal = pyqtSignal(str)
    status_signal = pyqtSignal(ComparisonStatus, object)
    save_error_signal = pyqtSignal(np.ndarray, str)
    comparison_details_signal = pyqtSignal(dict)
    error_detected_signal = pyqtSignal()
    serial_command_signal = pyqtSignal(str)

    def __init__(self, frame_queue, ref_data_provider, config_provider, compare_function):
        super().__init__()
        self.frame_queue = frame_queue
        self.get_ref_data = ref_data_provider
        self.get_config = config_provider
        self.compare_images_func = compare_function
        self.running = False
        self.last_error_time = 0
        self.last_emitted_serial_state = None
        self.last_status = None

    def run(self):
        self.running = True
        self.log_signal.emit("‚öôÔ∏è Worker started.")
        last_status_log_time = 0
        error_signaled_this_session = False
        self.last_emitted_serial_state = None
        self.last_status = None

        while self.running:
            try:
                frame = self.frame_queue.get(timeout=0.5)
            except Empty:
                if not self.running: break
                continue
            except Exception as e:
                self.log_signal.emit(f"‚ùå Error getting frame from queue: {e}")
                continue

            if not self.running: break

            try:
                cfg = self.get_config()
                err_cd = cfg.get('error_cooldown', DEFAULT_ERROR_COOLDOWN)
                err_f = cfg.get('error_folder')
                ref_data = self.get_ref_data()

                current_status, details = self.compare_images_func(frame, ref_data, cfg)
                self.comparison_details_signal.emit(details or {})

                status_info = STATUS_MAP.get(current_status, STATUS_MAP[ComparisonStatus.ERROR])
                status_label = status_info["label"]
                # status_color = status_info["color"] # Kh√¥ng d√πng tr·ª±c ti·∫øp trong worker n·ªØa
                log_prefix = status_info["log_prefix"]
                serial_cmd = status_info["serial"]

                log_msg = f"{log_prefix} Status: {status_label}"
                detail_str = ""
                if details:
                    if 'detected' in details:
                        det_items = sorted([f"{k}:{v}" for k,v in details['detected'].items()])
                        detail_str = f"Detect: {', '.join(det_items) if det_items else 'None'}"
                        if 'count' in details: detail_str += f" (Total: {details['count']})"
                    elif 'ssim_norm' in details:
                        detail_str = f"SSIM: {details['ssim_norm']:.4f}"
                    if 'reason' in details: detail_str += f" (Reason: {details['reason']})"
                    elif 'error' in details: detail_str += f" (Error: {details['error']})"
                    if detail_str: log_msg += f" ({detail_str})"

                needs_logging = True
                current_time_log = time.time()
                if current_status == ComparisonStatus.NORMAL:
                    if current_time_log - last_status_log_time < 5.0: needs_logging = False
                    else: last_status_log_time = current_time_log
                else:
                    last_status_log_time = 0
                    # Ch·ªâ log l·∫°i tr·∫°ng th√°i l·ªói n·∫øu n√≥ thay ƒë·ªïi so v·ªõi l·∫ßn cu·ªëi c√πng
                    # Ho·∫∑c n·∫øu ƒë√¢y l√† l·∫ßn ƒë·∫ßu ti√™n sau 1 kho·∫£ng th·ªùi gian? (Hi·ªán t·∫°i ch·ªâ log khi ƒë·ªïi)
                    if self.last_status == current_status: needs_logging = False

                if needs_logging: self.log_signal.emit(log_msg)

                if self.last_status != current_status:
                    self.status_signal.emit(current_status, details or {})
                    self.last_status = current_status

                is_problem_state = current_status in [ComparisonStatus.FAIL, ComparisonStatus.UNKNOWN, ComparisonStatus.ERROR]
                should_save_img = is_problem_state
                should_record = is_problem_state # D√πng c·ªù n√†y ƒë·ªÉ quy·∫øt ƒë·ªãnh video

                if should_record and not error_signaled_this_session:
                    self.error_detected_signal.emit()
                    error_signaled_this_session = True # ƒê√°nh d·∫•u ƒë√£ b√°o l·ªói cho phi√™n ghi n√†y

                # G·ª≠i l·ªánh serial n·∫øu tr·∫°ng th√°i c·∫ßn g·ª≠i thay ƒë·ªïi
                if serial_cmd and self.last_emitted_serial_state != serial_cmd:
                    self.serial_command_signal.emit(serial_cmd)
                    self.last_emitted_serial_state = serial_cmd
                elif not serial_cmd and self.last_emitted_serial_state: # Tr·∫°ng th√°i kh√¥ng c·∫ßn g·ª≠i n·ªØa
                    self.last_emitted_serial_state = None

                # L∆∞u ·∫£nh l·ªói (n·∫øu c·∫ßn v√† cooldown ƒë√£ h·∫øt)
                current_time_save = time.time()
                if should_save_img and err_f and (current_time_save - self.last_error_time > err_cd):
                    try:
                        err_sub = status_label.lower().replace("!", "").replace(" ", "_").replace(":", "")
                        save_folder = os.path.join(err_f, err_sub)
                        # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i (an to√†n h∆°n)
                        os.makedirs(save_folder, exist_ok=True)
                        timestamp = time.strftime('%Y%m%d_%H%M%S') + f"_{int((current_time_save - int(current_time_save)) * 1000):03d}"
                        filename = f"{err_sub}_{timestamp}.png"
                        filepath = os.path.join(save_folder, filename)
                        # G·ª≠i frame v√† ƒë∆∞·ªùng d·∫´n ƒë·∫øn lu·ªìng ch√≠nh ƒë·ªÉ l∆∞u
                        self.save_error_signal.emit(frame.copy(), filepath)
                        self.last_error_time = current_time_save
                    except Exception as e:
                        self.log_signal.emit(f"‚ùå L·ªói khi chu·∫©n b·ªã l∆∞u ·∫£nh l·ªói: {e}")
                elif not err_f and should_save_img:
                    # self.log_signal.emit("‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh th∆∞ m·ª•c l·ªói, kh√¥ng th·ªÉ l∆∞u ·∫£nh.")
                    pass # Kh√¥ng c·∫ßn log li√™n t·ª•c

                sleep_time = 0.05 if current_status == ComparisonStatus.NORMAL else 0.1 # Ng·ªß √≠t h∆°n n·∫øu Normal
                time.sleep(sleep_time)

            except Exception as e:
                self.log_signal.emit(f"üí• L·ªói nghi√™m tr·ªçng trong worker logic: {e}")
                self.log_signal.emit(traceback.format_exc())
                try:
                    # C·ªë g·∫Øng ph√°t t√≠n hi·ªáu l·ªói l√™n UI
                    self.status_signal.emit(ComparisonStatus.ERROR, {"error": str(e)})
                except Exception as sig_e:
                    # L·ªói r·∫•t nghi√™m tr·ªçng n·∫øu c·∫£ vi·ªác ph√°t t√≠n hi·ªáu c≈©ng th·∫•t b·∫°i
                    print(f"CRITICAL: Failed to emit error status signal: {sig_e}")
                self.last_status = ComparisonStatus.ERROR # Ghi nh·ªõ tr·∫°ng th√°i l·ªói
                time.sleep(0.5) # Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i

        self.log_signal.emit("‚öôÔ∏è Worker finished.")
        self.last_emitted_serial_state = None # Reset tr·∫°ng th√°i serial cu·ªëi
        error_signaled_this_session = False # Reset c·ªù b√°o l·ªói video
        self.last_status = None # Reset tr·∫°ng th√°i cu·ªëi


    def stop(self):
        self.running = False
        self.log_signal.emit("‚öôÔ∏è ƒêang y√™u c·∫ßu d·ª´ng worker...")


# --- Main Application Window ---
class ImageCheckerApp(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        # --- State Variables ---
        self.cap = None
        self.webcam_fps = 15.0
        self.frame_timer = QTimer(self)
        self.ref_data = {k: None for k in [REF_NORM, REF_SHUTDOWN, REF_FAIL]}
        self.yolo_model = None
        self.webcam_roi = None
        self.processing = False
        self.error_folder = None
        self.log_file_path = None
        self.pixmap_item = None
        self.runtime_timer = QTimer(self)
        self._current_runtime_minutes = DEFAULT_RUNTIME_MINUTES
        self._current_ssim_threshold = DEFAULT_SSIM_THRESHOLD
        self._current_error_cooldown = DEFAULT_ERROR_COOLDOWN
        self._record_on_error_enabled = DEFAULT_RECORD_ON_ERROR
        self.video_writer = None
        self.current_video_path = None
        self.error_occurred_during_recording = False
        self.serial_port = None
        self.serial_port_name = None
        self.serial_baud_rate = DEFAULT_BAUD_RATE
        self.serial_enabled = DEFAULT_SERIAL_ENABLED
        self.current_comparison_method = DEFAULT_COMPARISON_METHOD
        # --- Bi·∫øn tr·∫°ng th√°i m·ªõi cho Camera ---
        self.selected_camera_index = 0 # Ch·ªâ s·ªë camera ƒëang ch·ªçn, m·∫∑c ƒë·ªãnh l√† 0
        self.available_cameras = {} # Dict ƒë·ªÉ l∆∞u {index: "T√™n hi·ªÉn th·ªã"}

        self.comparison_functions = {
            METHOD_SSIM: self.compare_ssim_strategy,
            METHOD_YOLO: self.compare_yolo_strategy,
        }

        # Dictionary c·∫•u h√¨nh ch√≠nh
        self.config = {
            'comparison_method': self.current_comparison_method,
            'ssim_threshold': self._current_ssim_threshold,
            'error_cooldown': self._current_error_cooldown,
            'runtime_duration_minutes': self._current_runtime_minutes,
            'record_on_error': self._record_on_error_enabled,
            'error_folder': None,
            'ref_paths': {k: None for k in [REF_NORM, REF_SHUTDOWN, REF_FAIL]},
            'webcam_roi': None,
            'serial_port': self.serial_port_name,
            'serial_baud': self.serial_baud_rate,
            'serial_enabled': self.serial_enabled,
            'selected_camera_index': self.selected_camera_index, # Th√™m camera index v√†o config
            'yolo_model_path': None,
            'yolo_confidence': DEFAULT_YOLO_CONFIDENCE,
        }

        # K·∫øt n·ªëi t√≠n hi·ªáu
        self.frame_timer.timeout.connect(self.update_frame)
        self.runtime_timer.setSingleShot(True)
        self.runtime_timer.timeout.connect(self._runtime_timer_timeout)

        # Queue v√† Worker
        self.frame_queue = Queue(maxsize=10)
        self.processing_worker = None

        # Kh·ªüi t·∫°o UI
        self.init_ui()

        # ƒê·∫∑t sau init_ui ƒë·ªÉ ƒë·∫£m b·∫£o c√°c widget ƒë√£ t·ªìn t·∫°i
        QTimer.singleShot(100, self._refresh_camera_list) # Delay qu√©t camera l·∫ßn ƒë·∫ßu

        # T·∫£i config (s·∫Ω c·∫≠p nh·∫≠t c√°c gi√° tr·ªã state)
        self.load_config()

        # L√†m m·ªõi c·ªïng COM (t·∫£i l·∫°i danh s√°ch)
        self._refresh_com_ports()

        # Ghi log v√† c·∫≠p nh·∫≠t UI ban ƒë·∫ßu
        self.log_activity("·ª®ng d·ª•ng kh·ªüi ƒë·ªông.")
        self.update_all_ui_elements() # C·∫≠p nh·∫≠t gi√° tr·ªã & tr·∫°ng th√°i c√°c n√∫t

        # Th·ª≠ t·∫£i model YOLO n·∫øu c√≥ c·∫•u h√¨nh s·∫µn v√† ph∆∞∆°ng th·ª©c l√† YOLO
        if self.current_comparison_method == METHOD_YOLO and self.config.get('yolo_model_path'):
            # Delay m·ªôt ch√∫t ƒë·ªÉ UI c√≥ th·ªùi gian hi·ªÉn th·ªã tr∆∞·ªõc khi t·∫£i model (c√≥ th·ªÉ m·∫•t th·ªùi gian)
            QTimer.singleShot(250, self._load_yolo_model)

    # --- H√†m Provider cho Worker ---
    def get_current_config_for_worker(self):
        # Tr·∫£ v·ªÅ m·ªôt b·∫£n sao c√°c config c·∫ßn thi·∫øt cho worker
        return {
            'error_cooldown': self._current_error_cooldown,
            'error_folder': self.error_folder,
            'comparison_method': self.current_comparison_method,
            'ssim_threshold': self._current_ssim_threshold,
            'yolo_confidence': self.config.get('yolo_confidence', DEFAULT_YOLO_CONFIDENCE),
        }

    def get_reference_data_for_worker(self):
        # Tr·∫£ v·ªÅ d·ªØ li·ªáu tham chi·∫øu d·ª±a tr√™n ph∆∞∆°ng th·ª©c so s√°nh
        if self.current_comparison_method == METHOD_SSIM:
            # Tr·∫£ v·ªÅ b·∫£n sao c·ªßa ·∫£nh ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ ƒëa lu·ªìng
            return {k: (img.copy() if isinstance(img, np.ndarray) else None) for k, img in self.ref_data.items()}
        elif self.current_comparison_method == METHOD_YOLO:
            # --- ƒê·ªãnh nghƒ©a quy t·∫Øc YOLO c·ªë ƒë·ªãnh t·∫°i ƒë√¢y (ho·∫∑c t·∫£i t·ª´ file config/UI sau) ---
            return {
                # V√≠ d·ª• quy t·∫Øc:
                REF_NORM: {"required_objects": ["person"], "min_counts": {"person": 1}, "exact_total_objects": 1, "forbidden_objects": ["alert", "warning"]},
                REF_SHUTDOWN: {"forbidden_objects": ["person", "car"], "max_total_objects": 0},
                REF_FAIL: {"any_of": ["alert", "warning", "error_sign"]},
                # Th√™m c√°c quy t·∫Øc kh√°c n·∫øu c·∫ßn
            }
        else:
            return {} # Tr∆∞·ªùng h·ª£p ph∆∞∆°ng th·ª©c kh√¥ng x√°c ƒë·ªãnh

    # --- Slots c·∫≠p nh·∫≠t Config ---
    @QtCore.pyqtSlot(float)
    def _update_threshold_config(self, value):
        if abs(self._current_ssim_threshold - value) > 1e-4: # So s√°nh s·ªë th·ª±c
            self._current_ssim_threshold = value
            self.log_activity(f"‚öôÔ∏è Ng∆∞·ª°ng SSIM: {value:.3f}")
            self.config['ssim_threshold'] = value
            # self.save_config() # T√πy ch·ªçn: L∆∞u ngay ho·∫∑c ch·ªù

    @QtCore.pyqtSlot(int)
    def _update_cooldown_config(self, value):
        if self._current_error_cooldown != value:
            self._current_error_cooldown = value
            self.log_activity(f"‚öôÔ∏è Cooldown L·ªói: {value}s")
            self.config['error_cooldown'] = value
            # self.save_config()

    @QtCore.pyqtSlot(int)
    def _update_runtime_config(self, value):
        if self._current_runtime_minutes != value:
            self._current_runtime_minutes = value
            log_msg = f"‚öôÔ∏è Th·ªùi gian ch·∫°y: {'V√¥ h·∫°n' if value == 0 else f'{value} ph√∫t'}"
            self.log_activity(log_msg)
            self.config['runtime_duration_minutes'] = value
            # self.save_config()

    @QtCore.pyqtSlot()
    def _toggle_record_on_error(self):
        if self.processing:
             QMessageBox.warning(self,"ƒêang X·ª≠ L√Ω","Kh√¥ng th·ªÉ thay ƒë·ªïi c·∫•u h√¨nh ghi video khi ƒëang x·ª≠ l√Ω.")
             # Kh√¥i ph·ª•c tr·∫°ng th√°i n√∫t n·∫øu c·∫ßn (d√π n√∫t th∆∞·ªùng b·ªã disable)
             self.update_record_button_style()
             return
        self._record_on_error_enabled = not self._record_on_error_enabled
        self.config['record_on_error'] = self._record_on_error_enabled
        self.update_record_button_style()
        self.log_activity(f"‚öôÔ∏è Ghi video l·ªói: {'B·∫≠t' if self._record_on_error_enabled else 'T·∫Øt'}")
        # self.save_config()

    @QtCore.pyqtSlot(str)
    def _update_serial_port_config(self, port_name):
        # ƒê∆∞·ª£c g·ªçi khi user ch·ªçn t·ª´ ComboBox COM ports
        new_port = port_name if port_name and "Kh√¥ng t√¨m th·∫•y" not in port_name else None
        if self.serial_port_name != new_port:
             self.serial_port_name = new_port
             self.config['serial_port'] = self.serial_port_name
             self.log_activity(f"‚öôÔ∏è C·ªïng COM ƒë√£ ch·ªçn: {self.serial_port_name or 'Ch∆∞a ch·ªçn'}")
             # N·∫øu ƒëang k·∫øt n·ªëi, c·∫£nh b√°o c·∫ßn k·∫øt n·ªëi l·∫°i
             if self.serial_enabled: self.log_activity("‚ö†Ô∏è Thay ƒë·ªïi c·ªïng COM y√™u c·∫ßu K·∫øt n·ªëi l·∫°i th·ªß c√¥ng.")
             # self.save_config()

    @QtCore.pyqtSlot(str)
    def _update_serial_baud_config(self, baud_str):
        # ƒê∆∞·ª£c g·ªçi khi user ch·ªçn t·ª´ ComboBox Baudrate
        try:
            bd = int(baud_str)
            if self.serial_baud_rate != bd:
                if bd in COMMON_BAUD_RATES:
                    self.serial_baud_rate = bd
                    self.config['serial_baud'] = bd
                    self.log_activity(f"‚öôÔ∏è Baud rate ƒë√£ ch·ªçn: {bd}")
                    if self.serial_enabled: self.log_activity("‚ö†Ô∏è Thay ƒë·ªïi Baud rate y√™u c·∫ßu K·∫øt n·ªëi l·∫°i th·ªß c√¥ng.")
                    # self.save_config()
                else: # Gi√° tr·ªã l·∫° (kh√¥ng n√™n x·∫£y ra v·ªõi ComboBox c·ªë ƒë·ªãnh)
                     self.log_activity(f"‚ö†Ô∏è Baud rate kh√¥ng h·ª£p l·ªá: {bd}. S·ª≠ d·ª•ng gi√° tr·ªã c≈©: {self.serial_baud_rate}")
                     # T√¨m v√† ƒë·∫∑t l·∫°i index c≈© trong ComboBox
                     idx = self.baudRateComboBox.findText(str(self.serial_baud_rate))
                     if idx >= 0:
                         self.baudRateComboBox.blockSignals(True); self.baudRateComboBox.setCurrentIndex(idx); self.baudRateComboBox.blockSignals(False)
        except ValueError: # Kh√¥ng th·ªÉ chuy·ªÉn sang int (kh√¥ng n√™n x·∫£y ra)
            self.log_activity(f"‚ö†Ô∏è Gi√° tr·ªã Baud rate nh·∫≠p v√†o kh√¥ng ph·∫£i s·ªë: {baud_str}")
            # ƒê·∫∑t l·∫°i gi√° tr·ªã c≈©
            idx = self.baudRateComboBox.findText(str(self.serial_baud_rate))
            if idx >= 0: self.baudRateComboBox.blockSignals(True); self.baudRateComboBox.setCurrentIndex(idx); self.baudRateComboBox.blockSignals(False)

    @QtCore.pyqtSlot(str)
    def _update_comparison_method_config(self, method_name):
        # ƒê∆∞·ª£c g·ªçi khi user ch·ªçn ph∆∞∆°ng th·ª©c so s√°nh t·ª´ ComboBox
        if self.processing:
            self.log_activity("‚ö†Ô∏è Kh√¥ng th·ªÉ thay ƒë·ªïi ph∆∞∆°ng th·ª©c khi ƒëang x·ª≠ l√Ω.")
            # ƒê·∫∑t l·∫°i l·ª±a ch·ªçn v·ªÅ gi√° tr·ªã c≈©
            self.comparisonMethodComboBox.blockSignals(True)
            self.comparisonMethodComboBox.setCurrentText(self.current_comparison_method)
            self.comparisonMethodComboBox.blockSignals(False)
            return

        if method_name in self.comparison_functions and self.current_comparison_method != method_name:
            # Ki·ªÉm tra ƒë·∫∑c bi·ªát n·∫øu ch·ªçn YOLO m√† th∆∞ vi·ªán ch∆∞a c√†i
            if method_name == METHOD_YOLO and not YOLO_AVAILABLE:
                 QMessageBox.critical(self, "L·ªói Thi·∫øu Th∆∞ Vi·ªán", "Kh√¥ng t√¨m th·∫•y th∆∞ vi·ªán YOLOv8 (ultralytics).\nVui l√≤ng c√†i ƒë·∫∑t: pip install ultralytics")
                 # ƒê·∫∑t l·∫°i l·ª±a ch·ªçn v·ªÅ gi√° tr·ªã c≈©
                 self.comparisonMethodComboBox.blockSignals(True)
                 self.comparisonMethodComboBox.setCurrentText(self.current_comparison_method)
                 self.comparisonMethodComboBox.blockSignals(False)
                 return

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† config
            self.current_comparison_method = method_name
            self.config['comparison_method'] = method_name
            self.log_activity(f"‚öôÔ∏è Ph∆∞∆°ng th·ª©c so s√°nh: {method_name}")

            # C·∫≠p nh·∫≠t UI ƒë·ªÉ ·∫©n/hi·ªán c√°c ph·∫ßn c·∫•u h√¨nh t∆∞∆°ng ·ª©ng
            self._update_method_specific_ui()

            # N·∫øu chuy·ªÉn sang YOLO v√† ƒë√£ c√≥ ƒë∆∞·ªùng d·∫´n model, th·ª≠ t·∫£i ngay
            if method_name == METHOD_YOLO and self.config.get('yolo_model_path'):
                QTimer.singleShot(50, self._load_yolo_model) # Delay nh·∫π

            # self.save_config() # L∆∞u thay ƒë·ªïi ph∆∞∆°ng th·ª©c

    @QtCore.pyqtSlot(float)
    def _update_yolo_confidence_config(self, value):
        # ƒê∆∞·ª£c g·ªçi khi gi√° tr·ªã spinbox YOLO Confidence thay ƒë·ªïi
        current_conf = self.config.get('yolo_confidence', DEFAULT_YOLO_CONFIDENCE)
        if abs(current_conf - value) > 1e-4: # So s√°nh s·ªë th·ª±c
            # ƒê·∫£m b·∫£o gi√° tr·ªã trong kho·∫£ng h·ª£p l·ªá (d√π SpinBox ƒë√£ gi·ªõi h·∫°n)
            clamped_value = max(0.01, min(1.0, value))
            if abs(clamped_value - value) > 1e-4: # N·∫øu gi√° tr·ªã b·ªã k·∫πp -> c·∫≠p nh·∫≠t l·∫°i UI
                self.yoloConfidenceSpinBox.blockSignals(True)
                self.yoloConfidenceSpinBox.setValue(clamped_value)
                self.yoloConfidenceSpinBox.blockSignals(False)
            # C·∫≠p nh·∫≠t config v√† log
            self.config['yolo_confidence'] = clamped_value
            self.log_activity(f"‚öôÔ∏è Ng∆∞·ª°ng tin c·∫≠y YOLO: {clamped_value:.2f}")
            # self.save_config()

    # --- init_ui ---
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng."""
        self.setWindowTitle("Image Checker v3.1 (Camera Selection)")
        self.setGeometry(100, 100, 1350, 840) # TƒÉng chi·ªÅu cao c·ª≠a s·ªï m·ªôt ch√∫t
        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        # --- Panel Tr√°i: Hi·ªÉn th·ªã Webcam v√† N√∫t ƒëi·ªÅu khi·ªÉn ---
        self.scene = QGraphicsScene(self)
        self.graphicsView = QGraphicsView(self.scene, central_widget)
        self.graphicsView.setGeometry(10, 10, 640, 360) # K√≠ch th∆∞·ªõc khu v·ª±c webcam
        self.graphicsView.setStyleSheet("border: 1px solid black;")
        self.graphicsView.setBackgroundBrush(QtGui.QBrush(Qt.darkGray)) # N·ªÅn x√°m khi ch∆∞a c√≥ ·∫£nh

        # K√≠ch th∆∞·ªõc v√† v·ªã tr√≠ c∆° b·∫£n c·ªßa n√∫t
        bw, bh, vs, bx = 201, 31, 38, 20 # width, height, vertical_space, x_pos
        yp = 380 # Y-start pos for controls below webcam view

        # --- Webcam Controls ---
        self.ONCam = self.create_button("üì∑ B·∫≠t Webcam"); self.ONCam.setGeometry(bx, yp, bw, bh); self.ONCam.clicked.connect(self.start_webcam)
        self.OFFCam = self.create_button("üö´ T·∫Øt Webcam"); self.OFFCam.setGeometry(bx + bw + 10, yp, bw, bh); self.OFFCam.clicked.connect(self.stop_webcam); self.OFFCam.setEnabled(False);
        # N√∫t b·∫≠t webcam ban ƒë·∫ßu b·ªã disable cho ƒë·∫øn khi qu√©t xong camera
        self.ONCam.setEnabled(False)
        yp += vs # TƒÉng y cho h√†ng ti·∫øp theo

        # --- TH√äM PH·∫¶N CH·ªåN CAMERA ---
        self.cameraSelectionLabel = QLabel("Ch·ªçn Camera:", central_widget)
        self.cameraSelectionLabel.setGeometry(bx, yp + 5, 90, 31) # Nh√£n "Ch·ªçn Camera:"
        cam_combo_w = (bw * 2 + 10) - 95 - 45 # Chi·ªÅu r·ªông cho combobox
        self.cameraSelectionComboBox = QComboBox(central_widget)
        self.cameraSelectionComboBox.setGeometry(bx + 95, yp, cam_combo_w, 31) # ComboBox ch·ªçn cam
        self.cameraSelectionComboBox.setEnabled(False) # Disable ban ƒë·∫ßu
        self.refreshCamerasButton = QPushButton("üîÑ", central_widget) # N√∫t Refresh danh s√°ch cam
        self.refreshCamerasButton.setGeometry(bx + 95 + cam_combo_w + 5, yp, 40, 31) # V·ªã tr√≠ n√∫t Refresh
        self.refreshCamerasButton.setToolTip("L√†m m·ªõi danh s√°ch camera")
        self.refreshCamerasButton.setEnabled(False) # Disable ban ƒë·∫ßu
        # K·∫øt n·ªëi t√≠n hi·ªáu
        self.refreshCamerasButton.clicked.connect(self._refresh_camera_list)
        self.cameraSelectionComboBox.currentIndexChanged.connect(self._on_camera_selection_changed)
        # --- K·∫æT TH√öC PH·∫¶N CH·ªåN CAMERA ---
        yp += vs # TƒÉng y cho h√†ng ti·∫øp theo (cho c√°c n√∫t SSIM)

        # --- Load/Capture Reference Image Buttons (SSIM specific) ---
        # C·∫≠p nh·∫≠t v·ªã tr√≠ Y c·ªßa t·∫•t c·∫£ c√°c n√∫t b√™n d∆∞·ªõi
        self.SettingButton_Norm = self.create_button("üìÇ ·∫¢nh Norm (SSIM)"); self.SettingButton_Norm.setGeometry(bx, yp, bw, bh); self.SettingButton_Norm.clicked.connect(lambda: self.load_reference_image(REF_NORM))
        self.SettingButton_Shutdown = self.create_button("üìÇ ·∫¢nh Shutdown (SSIM)"); self.SettingButton_Shutdown.setGeometry(bx + bw + 10, yp, bw, bh); self.SettingButton_Shutdown.clicked.connect(lambda: self.load_reference_image(REF_SHUTDOWN))
        self.SettingButton_Fail = self.create_button("üìÇ ·∫¢nh Fail (SSIM)"); self.SettingButton_Fail.setGeometry(bx + 2 * (bw + 10), yp, bw, bh); self.SettingButton_Fail.clicked.connect(lambda: self.load_reference_image(REF_FAIL)); yp += vs

        self.CaptureButton_Norm = self.create_button("üì∏ Ch·ª•p Norm (SSIM)"); self.CaptureButton_Norm.setGeometry(bx, yp, bw, bh); self.CaptureButton_Norm.clicked.connect(lambda: self.capture_reference_from_webcam(REF_NORM)); self.CaptureButton_Norm.setEnabled(False)
        self.CaptureButton_Shut = self.create_button("üì∏ Ch·ª•p Shutdown (SSIM)"); self.CaptureButton_Shut.setGeometry(bx + bw + 10, yp, bw, bh); self.CaptureButton_Shut.clicked.connect(lambda: self.capture_reference_from_webcam(REF_SHUTDOWN)); self.CaptureButton_Shut.setEnabled(False)
        self.CaptureButton_Fail = self.create_button("üì∏ Ch·ª•p Fail (SSIM)"); self.CaptureButton_Fail.setGeometry(bx + 2 * (bw + 10), yp, bw, bh); self.CaptureButton_Fail.clicked.connect(lambda: self.capture_reference_from_webcam(REF_FAIL)); self.CaptureButton_Fail.setEnabled(False); yp += vs

        # --- ROI, Save Folder, Start/Stop, Exit Buttons ---
        self.SettingButton_ROI_Webcam = self.create_button("‚úÇÔ∏è Ch·ªçn ROI"); self.SettingButton_ROI_Webcam.setGeometry(bx, yp, bw, bh); self.SettingButton_ROI_Webcam.clicked.connect(self.select_webcam_roi); self.SettingButton_ROI_Webcam.setEnabled(False)
        self.SaveButton = self.create_button("üìÅ Th∆∞ m·ª•c l·ªói"); self.SaveButton.setGeometry(bx + bw + 10, yp, bw, bh); self.SaveButton.clicked.connect(self.select_error_folder)
        self.ToggleProcessingButton = self.create_button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu"); self.ToggleProcessingButton.setGeometry(bx + 2 * (bw + 10), yp, bw, bh); self.ToggleProcessingButton.clicked.connect(self.toggle_processing); yp += vs

        self.ExitButton = self.create_button("üö™ Tho√°t"); self.ExitButton.setGeometry(bx, yp, bw, bh); self.ExitButton.clicked.connect(self.close_application); # yp += vs # D√≤ng cu·ªëi

        # --- Panel Ph·∫£i: Log, Tr·∫°ng th√°i, C·∫•u h√¨nh ---
        rx = 670 # X-start for right panel
        # T·ª± ƒë·ªông t√≠nh chi·ªÅu r·ªông panel ph·∫£i d·ª±a tr√™n k√≠ch th∆∞·ªõc c·ª≠a s·ªï
        self.right_panel_width = self.geometry().width() - rx - 20
        lw = self.right_panel_width

        # --- Log Area ---
        log_label = QLabel("Log Ho·∫°t ƒê·ªông:", central_widget); log_label.setGeometry(rx, 10, 150, 20)
        self.log_text_edit = QTextEdit(central_widget); self.log_text_edit.setGeometry(rx, 35, lw, 250); self.log_text_edit.setReadOnly(True); self.log_text_edit.setStyleSheet("border:1px solid black; padding:5px; background-color:white; font-family:Consolas,monospace; font-size:10pt;")

        # --- Status Labels ---
        status_y = 300
        self.process_label = QLabel("Tr·∫°ng th√°i: Ch·ªù", central_widget); self.process_label.setGeometry(rx, status_y, lw, 40); self.process_label.setAlignment(Qt.AlignCenter); self.process_label.setStyleSheet("border:1px solid black; padding:5px; background-color:lightgray; font-weight:bold; border-radius:3px;")
        self.details_label = QLabel("Details: N/A", central_widget); self.details_label.setGeometry(rx, status_y + 45, lw, 30); self.details_label.setAlignment(Qt.AlignCenter); self.details_label.setStyleSheet("padding:5px; background-color:#f0f0f0; border-radius:3px;")

        # --- Configuration Controls ---
        # V·ªã tr√≠ v√† k√≠ch th∆∞·ªõc cho c√°c control c·∫•u h√¨nh
        sx_lbl = rx + 10      # X-pos for labels
        lbl_w = 140           # Width for labels
        sx_ctrl = sx_lbl + lbl_w + 5 # X-pos for controls
        ctrl_w_main = lw - (sx_ctrl - rx) - 10 # Width for most controls (t·ª± t√≠nh to√°n)
        ctrl_w_sm_btn = 40     # Width for small buttons (like refresh COM)
        s_vs_cfg = 38         # Vertical spacing for settings rows
        sy_cfg = status_y + 45 + 30 + 15 # Y-start position for settings

        # --- Method Selection ---
        lm = QLabel("Ph∆∞∆°ng th·ª©c:", central_widget); lm.setGeometry(sx_lbl, sy_cfg, lbl_w, 31)
        self.comparisonMethodComboBox = QComboBox(central_widget); self.comparisonMethodComboBox.setGeometry(sx_ctrl, sy_cfg, ctrl_w_main, 31)
        self.comparisonMethodComboBox.addItems([METHOD_SSIM, METHOD_YOLO])
        self.comparisonMethodComboBox.setToolTip("Ch·ªçn thu·∫≠t to√°n so s√°nh ·∫£nh")
        self.comparisonMethodComboBox.currentTextChanged.connect(self._update_comparison_method_config); sy_cfg += s_vs_cfg

        # --- SSIM Specific Group ---
        self.ssimGroup = QGroupBox("C·∫•u h√¨nh SSIM", central_widget)
        self.ssimGroup.setGeometry(rx, sy_cfg, lw, s_vs_cfg + 5)
        self.ssimGroup.setVisible(False) # ·∫®n ban ƒë·∫ßu
        self.ssimThresholdLabel = QLabel("Ng∆∞·ª°ng SSIM:", self.ssimGroup); self.ssimThresholdLabel.setGeometry(10, 10, lbl_w - 10, 31) # V·ªã tr√≠ b√™n trong group
        self.ssimThresholdSpinBox = QDoubleSpinBox(self.ssimGroup); self.ssimThresholdSpinBox.setGeometry(sx_ctrl - rx, 10, ctrl_w_main - 10, 31) # V·ªã tr√≠ b√™n trong group
        self.ssimThresholdSpinBox.setRange(0.1, 1.0); self.ssimThresholdSpinBox.setSingleStep(0.01); self.ssimThresholdSpinBox.setDecimals(3)
        self.ssimThresholdSpinBox.valueChanged.connect(self._update_threshold_config);
        # Ch·ªâ tƒÉng sy_cfg n·∫øu group ƒë∆∞·ª£c hi·ªÉn th·ªã, nh∆∞ng ƒë·ªÉ ƒë∆°n gi·∫£n, t√≠nh to√°n tr∆∞·ªõc v·ªã tr√≠ y ti·∫øp theo
        sy_after_ssim = sy_cfg + s_vs_cfg + 15

        # --- YOLOv8 Specific Group ---
        self.yoloGroup = QGroupBox("C·∫•u h√¨nh YOLOv8", central_widget)
        yolo_group_height = s_vs_cfg * 2 + 15 # Cao h∆°n SSIM group
        self.yoloGroup.setGeometry(rx, sy_cfg, lw, yolo_group_height) # ƒê·∫∑t ·ªü c√πng Y v·ªõi SSIM group
        self.yoloGroup.setVisible(False) # ·∫®n ban ƒë·∫ßu
        # --- Model Path Row (b√™n trong YOLO group) ---
        lyp_y = 10
        lyp = QLabel("Model Path:", self.yoloGroup); lyp.setGeometry(10, lyp_y, lbl_w - 10, 31)
        yolo_btn_w = 150
        self.yoloModelPathButton = QPushButton("üìÅ Ch·ªçn Model (.pt)", self.yoloGroup); self.yoloModelPathButton.setGeometry(sx_ctrl - rx, lyp_y, yolo_btn_w, 31); self.yoloModelPathButton.clicked.connect(self._select_yolo_model_path)
        # Label hi·ªÉn th·ªã t√™n file model (n·∫±m b√™n ph·∫£i n√∫t ch·ªçn)
        yolo_lbl_x = sx_ctrl - rx + yolo_btn_w + 5
        yolo_lbl_w = lw - yolo_lbl_x - 15 # Chi·ªÅu r·ªông c√≤n l·∫°i
        self.yoloModelPathLabel = QLabel("Ch∆∞a ch·ªçn model", self.yoloGroup); self.yoloModelPathLabel.setGeometry(yolo_lbl_x, lyp_y, yolo_lbl_w, 31); self.yoloModelPathLabel.setStyleSheet("font-style: italic; color: gray;")
        # --- Confidence Row (b√™n trong YOLO group) ---
        conf_y = lyp_y + s_vs_cfg
        self.yoloConfidenceLabel = QLabel("Ng∆∞·ª°ng Conf:", self.yoloGroup); self.yoloConfidenceLabel.setGeometry(10, conf_y, lbl_w - 10, 31)
        self.yoloConfidenceSpinBox = QDoubleSpinBox(self.yoloGroup); self.yoloConfidenceSpinBox.setGeometry(sx_ctrl - rx, conf_y, ctrl_w_main - 10, 31) # K√©o d√†i control
        self.yoloConfidenceSpinBox.setRange(0.01, 1.0); self.yoloConfidenceSpinBox.setSingleStep(0.05); self.yoloConfidenceSpinBox.setDecimals(2)
        self.yoloConfidenceSpinBox.setToolTip("Ng∆∞·ª°ng tin c·∫≠y t·ªëi thi·ªÉu cho YOLO detection (0.01-1.0)")
        self.yoloConfidenceSpinBox.valueChanged.connect(self._update_yolo_confidence_config);
        # Y position sau group YOLO
        sy_after_yolo = sy_cfg + yolo_group_height + 10
        # Y position cu·ªëi c√πng cho c√°c c√†i ƒë·∫∑t chung l√† v·ªã tr√≠ l·ªõn nh·∫•t c·ªßa 2 group
        sy_cfg = max(sy_after_ssim, sy_after_yolo)

        # --- Common Settings ---
        lc = QLabel("Cooldown L·ªói (s):", central_widget); lc.setGeometry(sx_lbl, sy_cfg, lbl_w, 31)
        self.cooldownSpinBox = QSpinBox(central_widget); self.cooldownSpinBox.setGeometry(sx_ctrl, sy_cfg, ctrl_w_main, 31); self.cooldownSpinBox.setRange(1, 300); self.cooldownSpinBox.setSingleStep(1); self.cooldownSpinBox.valueChanged.connect(self._update_cooldown_config); sy_cfg += s_vs_cfg

        lr = QLabel("Th·ªùi gian ch·∫°y (ph√∫t):", central_widget); lr.setGeometry(sx_lbl, sy_cfg, lbl_w, 31)
        self.runtimeSpinBox = QSpinBox(central_widget); self.runtimeSpinBox.setGeometry(sx_ctrl, sy_cfg, ctrl_w_main, 31); self.runtimeSpinBox.setRange(0, 1440); self.runtimeSpinBox.setSingleStep(10); self.runtimeSpinBox.setToolTip("0 = Ch·∫°y v√¥ h·∫°n"); self.runtimeSpinBox.valueChanged.connect(self._update_runtime_config); sy_cfg += s_vs_cfg

        self.ToggleRecordOnErrorButton = self.create_button("üé• Quay video l·ªói: T·∫Øt"); self.ToggleRecordOnErrorButton.setGeometry(sx_lbl, sy_cfg, ctrl_w_main + (sx_ctrl-sx_lbl), 31) # K√©o d√†i n√∫t
        self.ToggleRecordOnErrorButton.clicked.connect(self._toggle_record_on_error); sy_cfg += s_vs_cfg + 5 # Th√™m kho·∫£ng c√°ch nh·ªè

        # --- Serial Port Settings Group ---
        serial_group_height = s_vs_cfg * 3 + 15
        self.serialGroup = QGroupBox("C·∫•u h√¨nh Serial COM", central_widget)
        self.serialGroup.setGeometry(rx, sy_cfg, lw, serial_group_height) # ƒê·∫∑t group
        sy_serial = 10 # Y t∆∞∆°ng ƒë·ªëi b√™n trong groupbox n√†y
        # COM Port Row
        lcp = QLabel("C·ªïng COM:", self.serialGroup); lcp.setGeometry(10, sy_serial, lbl_w - 10, 31)
        com_combo_w = ctrl_w_main - ctrl_w_sm_btn - 5 # Width cho combo COM
        self.comPortComboBox = QComboBox(self.serialGroup); self.comPortComboBox.setGeometry(sx_ctrl - rx, sy_serial, com_combo_w, 31); self.comPortComboBox.currentTextChanged.connect(self._update_serial_port_config)
        self.refreshComButton = QPushButton("üîÑ", self.serialGroup); self.refreshComButton.setGeometry(sx_ctrl - rx + com_combo_w + 5, sy_serial, ctrl_w_sm_btn, 31); self.refreshComButton.clicked.connect(self._refresh_com_ports); sy_serial += s_vs_cfg
        # Baud Rate Row
        lbr = QLabel("Baud Rate:", self.serialGroup); lbr.setGeometry(10, sy_serial, lbl_w - 10, 31)
        self.baudRateComboBox = QComboBox(self.serialGroup); self.baudRateComboBox.setGeometry(sx_ctrl - rx, sy_serial, ctrl_w_main - 10, 31); self.baudRateComboBox.addItems([str(br) for br in COMMON_BAUD_RATES]); self.baudRateComboBox.currentTextChanged.connect(self._update_serial_baud_config); sy_serial += s_vs_cfg
        # Toggle Connect/Disconnect Button
        self.ToggleSerialPortButton = self.create_button("üîå K·∫øt n·ªëi COM"); self.ToggleSerialPortButton.setGeometry(10, sy_serial, ctrl_w_main + (sx_ctrl-rx-10), 31) # K√©o d√†i n√∫t
        self.ToggleSerialPortButton.clicked.connect(self._toggle_serial_port)
        # sy_cfg += serial_group_height + 10 # Y position sau group Serial (n·∫øu c·∫ßn th√™m g√¨ b√™n d∆∞·ªõi)

        # C·∫≠p nh·∫≠t UI ·∫©n/hi·ªán group SSIM/YOLO ban ƒë·∫ßu
        self._update_method_specific_ui()

    def create_button(self, text):
        """H√†m tr·ª£ gi√∫p t·∫°o QPushButton v·ªõi style chu·∫©n."""
        button = QPushButton(text, self.centralWidget())
        # C√≥ th·ªÉ th√™m style m·∫∑c ƒë·ªãnh ·ªü ƒë√¢y n·∫øu mu·ªën
        # button.setStyleSheet("padding: 5px;")
        return button

    # --- Config Save/Load/Reset ---
    def save_config(self):
        """L∆∞u c·∫•u h√¨nh hi·ªán t·∫°i v√†o file JSON."""
        self.config['comparison_method'] = self.current_comparison_method
        self.config['ssim_threshold'] = self._current_ssim_threshold
        self.config['error_cooldown'] = self._current_error_cooldown
        self.config['runtime_duration_minutes'] = self._current_runtime_minutes
        self.config['record_on_error'] = self._record_on_error_enabled
        self.config['error_folder'] = self.error_folder
        self.config['webcam_roi'] = list(self.webcam_roi) if self.webcam_roi else None
        # L·∫•y gi√° tr·ªã YOLO conf t·ª´ UI (an to√†n h∆°n)
        if hasattr(self, 'yoloConfidenceSpinBox'):
             self.config['yolo_confidence'] = self.yoloConfidenceSpinBox.value()
        # yolo_model_path ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ch·ªçn
        self.config['selected_camera_index'] = self.selected_camera_index # L∆∞u camera ƒë√£ ch·ªçn

        # Ch·ªâ l∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh SSIM n·∫øu h·ª£p l·ªá
        valid_ref_paths = {}
        for k, img in self.ref_data.items():
            path_in_config = self.config['ref_paths'].get(k)
            if isinstance(img, np.ndarray) and img.size > 0 and isinstance(path_in_config, str) and os.path.isfile(path_in_config):
                valid_ref_paths[k] = path_in_config
        self.config['ref_paths'] = valid_ref_paths

        # C·∫•u h√¨nh Serial
        self.config['serial_port'] = self.serial_port_name
        self.config['serial_baud'] = self.serial_baud_rate
        # Kh√¥ng l∆∞u serial_enabled l√† True, ƒë·ªÉ ng∆∞·ªùi d√πng t·ª± k·∫øt n·ªëi l·∫°i
        self.config['serial_enabled'] = False # Lu√¥n l∆∞u l√† False

        try:
            config_dir = os.path.dirname(CONFIG_FILE_NAME) or '.'
            os.makedirs(config_dir, exist_ok=True) # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
            with open(CONFIG_FILE_NAME, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=4, ensure_ascii=False)
            # self.log_activity(f"üíæ ƒê√£ l∆∞u c·∫•u h√¨nh v√†o '{CONFIG_FILE_NAME}'") # Log n·∫øu c·∫ßn
        except Exception as e:
            self.log_activity(f"‚ùå L·ªói khi l∆∞u c·∫•u h√¨nh: {e}")
            # Hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng
            QMessageBox.critical(self, "L·ªói L∆∞u Config", f"Kh√¥ng th·ªÉ l∆∞u c·∫•u h√¨nh v√†o file:\n{CONFIG_FILE_NAME}\n\nL·ªói: {e}")

    def load_config(self):
        """T·∫£i c·∫•u h√¨nh t·ª´ file JSON, x·ª≠ l√Ω l·ªói v√† gi√° tr·ªã m·∫∑c ƒë·ªãnh."""
        if not os.path.exists(CONFIG_FILE_NAME):
            self.log_activity(f"üìÑ Kh√¥ng t√¨m th·∫•y file config '{CONFIG_FILE_NAME}'. S·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh.")
            self.reset_to_defaults() # Reset s·∫Ω c·∫≠p nh·∫≠t UI v√† l∆∞u config m·∫∑c ƒë·ªãnh
            return

        try:
            with open(CONFIG_FILE_NAME, 'r', encoding='utf-8') as f:
                lcfg = json.load(f) # Loaded config

            # 1. Ph∆∞∆°ng th·ª©c so s√°nh
            loaded_method = lcfg.get('comparison_method', DEFAULT_COMPARISON_METHOD)
            if loaded_method in self.comparison_functions:
                if loaded_method == METHOD_YOLO and not YOLO_AVAILABLE:
                    self.log_activity(f"‚ö†Ô∏è YOLO ƒë∆∞·ª£c ch·ªçn nh∆∞ng ch∆∞a c√†i ƒë·∫∑t. ƒê·ªïi v·ªÅ {DEFAULT_COMPARISON_METHOD}.")
                    self.current_comparison_method = DEFAULT_COMPARISON_METHOD
                else:
                    self.current_comparison_method = loaded_method
            else:
                self.log_activity(f"‚ö†Ô∏è Ph∆∞∆°ng th·ª©c '{loaded_method}' kh√¥ng h·ª£p l·ªá. D√πng m·∫∑c ƒë·ªãnh.")
                self.current_comparison_method = DEFAULT_COMPARISON_METHOD
            self.config['comparison_method'] = self.current_comparison_method

            # 2. C√°c gi√° tr·ªã s·ªë v√† boolean
            try: self._current_ssim_threshold = max(0.1, min(1.0, float(lcfg.get('ssim_threshold', DEFAULT_SSIM_THRESHOLD))))
            except (ValueError, TypeError): self._current_ssim_threshold = DEFAULT_SSIM_THRESHOLD
            self.config['ssim_threshold'] = self._current_ssim_threshold

            try: self._current_error_cooldown = max(1, min(300, int(lcfg.get('error_cooldown', DEFAULT_ERROR_COOLDOWN))))
            except (ValueError, TypeError): self._current_error_cooldown = DEFAULT_ERROR_COOLDOWN
            self.config['error_cooldown'] = self._current_error_cooldown

            try: self._current_runtime_minutes = max(0, min(1440, int(lcfg.get('runtime_duration_minutes', DEFAULT_RUNTIME_MINUTES))))
            except (ValueError, TypeError): self._current_runtime_minutes = DEFAULT_RUNTIME_MINUTES
            self.config['runtime_duration_minutes'] = self._current_runtime_minutes

            lrec = lcfg.get('record_on_error', DEFAULT_RECORD_ON_ERROR)
            self._record_on_error_enabled = bool(lrec) if isinstance(lrec, bool) else DEFAULT_RECORD_ON_ERROR
            self.config['record_on_error'] = self._record_on_error_enabled

            # 3. Camera Index ƒë√£ ch·ªçn
            try:
                loaded_idx = int(lcfg.get('selected_camera_index', 0))
                self.selected_camera_index = loaded_idx
            except (ValueError, TypeError):
                self.log_activity("‚ö†Ô∏è Gi√° tr·ªã 'selected_camera_index' kh√¥ng h·ª£p l·ªá. D√πng m·∫∑c ƒë·ªãnh 0.")
                self.selected_camera_index = 0
            self.config['selected_camera_index'] = self.selected_camera_index

            # 4. Serial Port (Lu√¥n ƒë·∫∑t enabled=False khi t·∫£i)
            self.serial_port_name = lcfg.get('serial_port', None)
            if not isinstance(self.serial_port_name, (str, type(None))): self.serial_port_name = None
            try:
                baud = int(lcfg.get('serial_baud', DEFAULT_BAUD_RATE))
                self.serial_baud_rate = baud if baud in COMMON_BAUD_RATES else DEFAULT_BAUD_RATE
            except (ValueError, TypeError): self.serial_baud_rate = DEFAULT_BAUD_RATE
            self.serial_enabled = False # Kh√¥ng t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i khi kh·ªüi ƒë·ªông
            # C·∫≠p nh·∫≠t config dict
            self.config['serial_port'] = self.serial_port_name
            self.config['serial_baud'] = self.serial_baud_rate
            self.config['serial_enabled'] = False

            # 5. Th∆∞ m·ª•c l·ªói v√† ROI
            lfold = lcfg.get('error_folder')
            self.error_folder = None
            if lfold and isinstance(lfold, str):
                 # Ki·ªÉm tra s·ª± t·ªìn t·∫°i v√† quy·ªÅn ghi ch·ªâ khi c·∫ßn d√πng
                 # Ch√∫ng ta c√≥ th·ªÉ ki·ªÉm tra ·ªü ƒë√¢y n·∫øu mu·ªën, nh∆∞ng s·∫Ω l√†m ch·∫≠m qu√° tr√¨nh t·∫£i
                 # if os.path.isdir(lfold) and os.access(lfold, os.W_OK):
                 self.error_folder = lfold
                 # else: self.log_activity(f"‚ö†Ô∏è Th∆∞ m·ª•c l·ªói '{lfold}' kh√¥ng h·ª£p l·ªá/kh√¥ng ghi ƒë∆∞·ª£c.")
            self.config['error_folder'] = self.error_folder

            lroi = lcfg.get('webcam_roi'); self.webcam_roi = None
            if isinstance(lroi, list) and len(lroi) == 4:
                 try:
                     rt = tuple(int(x) for x in lroi)
                     if all(v >= 0 for v in rt) and rt[2] > 0 and rt[3] > 0: self.webcam_roi = rt
                 except (ValueError, TypeError): pass
            self.config['webcam_roi'] = list(self.webcam_roi) if self.webcam_roi else None

            # 6. T·∫£i ƒë∆∞·ªùng d·∫´n ·∫£nh SSIM v√† load ·∫£nh
            lrefs = lcfg.get('ref_paths', {})
            self.config['ref_paths'] = {k: None for k in self.ref_data.keys()} # Reset trong config
            self.ref_data = {k: None for k in self.ref_data.keys()} # Reset ·∫£nh ƒë√£ t·∫£i
            loaded_image_keys = []
            for k in self.ref_data.keys():
                p = lrefs.get(k)
                if p and isinstance(p, str) and os.path.isfile(p):
                    try:
                        img_bytes = np.fromfile(p, dtype=np.uint8) # X·ª≠ l√Ω Unicode path
                        img = cv2.imdecode(img_bytes, cv2.IMREAD_COLOR)
                        if img is not None:
                            self.ref_data[k] = img
                            self.config['ref_paths'][k] = p # L∆∞u l·∫°i ƒë∆∞·ªùng d·∫´n ƒë√£ t·∫£i th√†nh c√¥ng
                            loaded_image_keys.append(k)
                        # else: self.log_activity(f"‚ö†Ô∏è Kh√¥ng th·ªÉ decode ·∫£nh SSIM '{k}' t·ª´ '{p}'")
                    except Exception as e:
                        self.log_activity(f"‚ö†Ô∏è L·ªói khi t·∫£i ·∫£nh SSIM '{k}' t·ª´ '{p}': {e}")
            if loaded_image_keys: self.log_activity(f"‚úÖ T·∫£i ·∫£nh SSIM: {', '.join(loaded_image_keys)}")

            # 7. C·∫•u h√¨nh YOLO
            self.config['yolo_model_path'] = lcfg.get('yolo_model_path', None)
            if self.config['yolo_model_path'] and not isinstance(self.config['yolo_model_path'], str):
                 self.config['yolo_model_path'] = None # Validate type
            try:
                yolo_conf = float(lcfg.get('yolo_confidence', DEFAULT_YOLO_CONFIDENCE))
                # K·∫πp gi√° tr·ªã trong kho·∫£ng h·ª£p l·ªá
                self.config['yolo_confidence'] = max(0.01, min(1.0, yolo_conf))
            except (ValueError, TypeError):
                self.config['yolo_confidence'] = DEFAULT_YOLO_CONFIDENCE

            # 8. C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n file log (d·ª±a tr√™n error_folder v·ª´a t·∫£i)
            self.log_file_path = os.path.join(self.error_folder, LOG_FILE_NAME) if self.error_folder else None
            self.log_activity(f"üíæ ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ '{CONFIG_FILE_NAME}'.")

        except json.JSONDecodeError as e:
             self.log_activity(f"‚ùå L·ªói JSON trong file config: {e}. S·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh.")
             self.reset_to_defaults()
        except Exception as e:
             self.log_activity(f"‚ùå L·ªói nghi√™m tr·ªçng khi t·∫£i config: {e}. S·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh.")
             self.log_activity(traceback.format_exc())
             self.reset_to_defaults()

        # L∆∞u √Ω: self.update_all_ui_elements() n√™n ƒë∆∞·ª£c g·ªçi sau load_config ·ªü __init__

    def reset_to_defaults(self):
        """Reset c·∫•u h√¨nh v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh."""
        self.log_activity("üîÑ Reset v·ªÅ m·∫∑c ƒë·ªãnh...")

        # Reset State Variables
        self.current_comparison_method = DEFAULT_COMPARISON_METHOD
        self._current_ssim_threshold = DEFAULT_SSIM_THRESHOLD
        self._current_error_cooldown = DEFAULT_ERROR_COOLDOWN
        self._current_runtime_minutes = DEFAULT_RUNTIME_MINUTES
        self._record_on_error_enabled = DEFAULT_RECORD_ON_ERROR
        self.error_folder = None
        self.log_file_path = None # S·∫Ω ƒë∆∞·ª£c ƒë·∫∑t l·∫°i d·ª±a tr√™n error_folder (hi·ªán l√† None)
        self.webcam_roi = None
        self.ref_data = {k: None for k in [REF_NORM, REF_SHUTDOWN, REF_FAIL]}
        self.selected_camera_index = 0 # Reset camera index v·ªÅ 0
        self.available_cameras = {}    # X√≥a list camera c≈©

        # Gi·∫£i ph√≥ng model YOLO
        if self.yolo_model is not None:
            try: del self.yolo_model; self.yolo_model = None
            except Exception: pass # Ignore error on deletion

        # Reset Serial State
        self.serial_port_name = None
        self.serial_baud_rate = DEFAULT_BAUD_RATE
        self.serial_enabled = False
        if self.serial_port and self.serial_port.is_open:
            try: self.serial_port.close()
            except Exception: pass
        self.serial_port = None

        # Reset Config Dictionary v·ªÅ m·∫∑c ƒë·ªãnh
        self.config = {
            'comparison_method': DEFAULT_COMPARISON_METHOD,
            'ssim_threshold': DEFAULT_SSIM_THRESHOLD,
            'error_cooldown': DEFAULT_ERROR_COOLDOWN,
            'runtime_duration_minutes': DEFAULT_RUNTIME_MINUTES,
            'record_on_error': DEFAULT_RECORD_ON_ERROR,
            'error_folder': None,
            'ref_paths': {k: None for k in [REF_NORM, REF_SHUTDOWN, REF_FAIL]},
            'webcam_roi': None,
            'serial_port': None,
            'serial_baud': DEFAULT_BAUD_RATE,
            'serial_enabled': False,
            'selected_camera_index': 0, # Reset trong config
            'yolo_model_path': None,
            'yolo_confidence': DEFAULT_YOLO_CONFIDENCE,
        }

        # C·∫≠p nh·∫≠t l·∫°i giao di·ªán ng∆∞·ªùi d√πng v√† refresh lists
        if hasattr(self, 'comparisonMethodComboBox'): # Ki·ªÉm tra UI ƒë√£ init ch∆∞a
            self.update_all_ui_elements() # C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c control
            # Refresh c√°c danh s√°ch ƒë·ªông sau khi update UI ch√≠nh
            QTimer.singleShot(50, self._refresh_camera_list) # L√†m m·ªõi camera list
            QTimer.singleShot(100, self._refresh_com_ports) # L√†m m·ªõi COM port list

        # L∆∞u l·∫°i file config v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh m·ªõi
        self.save_config()
        self.log_activity("üîÑ Ho√†n t·∫•t reset v·ªÅ m·∫∑c ƒë·ªãnh.")

    # --- Camera Detection and Selection ---
    def _detect_available_cameras(self):
        """
        Qu√©t c√°c ch·ªâ s·ªë camera v√† tr·∫£ v·ªÅ dict {index: "T√™n hi·ªÉn th·ªã"}.
        S·ª≠ d·ª•ng c√°ch th·ª≠ m·ªü ƒë·ªÉ ki·ªÉm tra, c·∫©n th·∫≠n h∆°n ƒë·ªÉ tr√°nh treo.
        """
        detected_cameras = {}
        self.log_activity("üîÑ ƒêang qu√©t t√¨m camera...")
        # ∆Øu ti√™n c√°c backend API ho·∫°t ƒë·ªông t·ªët h∆°n tr√™n Windows
        preferred_backends = [cv2.CAP_DSHOW, cv2.CAP_MSMF, cv2.CAP_ANY] # cv2.CAP_ANY l√† m·∫∑c ƒë·ªãnh
        max_test_index = 8 # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng camera ki·ªÉm tra ƒë·ªÉ tr√°nh qu√° l√¢u

        for index in range(max_test_index):
            temp_cap = None
            opened_success = False
            backend_used_name = "N/A"

            for backend in preferred_backends:
                try:
                    # C·ªë g·∫Øng m·ªü camera v·ªõi API c·ª• th·ªÉ
                    temp_cap = cv2.VideoCapture(index, backend)
                    # Ki·ªÉm tra xem ƒë√£ m·ªü ƒë∆∞·ª£c ch∆∞a v√† c√≥ ƒë·ªçc ƒë∆∞·ª£c frame kh√¥ng
                    if temp_cap and temp_cap.isOpened():
                        # ƒê·ªçc th·ª≠ 1 frame ƒë·ªÉ ch·∫Øc ch·∫Øn camera ho·∫°t ƒë·ªông
                        ret_test, _ = temp_cap.read()
                        temp_cap.release() # Gi·∫£i ph√≥ng ngay sau khi ki·ªÉm tra
                        if ret_test: # N·∫øu ƒë·ªçc frame th√†nh c√¥ng
                            backend_used_name = "Unknown"
                            try: # Th·ª≠ l·∫•y t√™n backend API (c√≥ th·ªÉ th·∫•t b·∫°i)
                                # C·∫ßn t·∫°o l·∫°i capture ƒë·ªÉ l·∫•y t√™n? Kh√° t·ªën k√©m.
                                # T·∫°m th·ªùi b·ªè qua l·∫•y t√™n backend ƒë·ªÉ ƒë∆°n gi·∫£n v√† nhanh h∆°n.
                                pass # backend_used_name = temp_cap.getBackendName()
                            except: pass

                            display_name = f"Camera {index}"
                            # if backend_used_name != "N/A": display_name += f" ({backend_used_name})"
                            detected_cameras[index] = display_name
                            opened_success = True
                            break # T√¨m th·∫•y backend ho·∫°t ƒë·ªông cho index n√†y, chuy·ªÉn sang index ti·∫øp theo
                    elif temp_cap:
                         temp_cap.release() # ƒê√≥ng n·∫øu ch·ªâ isOpened() tr·∫£ v·ªÅ False

                except Exception:
                    # L·ªói khi th·ª≠ m·ªü camera (b·ªè qua v√† th·ª≠ backend/index kh√°c)
                    if temp_cap: # ƒê·∫£m b·∫£o ƒë√≥ng n·∫øu l·ªói x·∫£y ra sau khi t·∫°o object
                        try: temp_cap.release()
                        except Exception: pass

            # Optional: N·∫øu kh√¥ng m·ªü ƒë∆∞·ª£c index > 0, c√≥ th·ªÉ d·ª´ng s·ªõm
            # if index > 0 and not opened_success:
            #     break

        if detected_cameras:
             log_msg = "‚úÖ T√¨m th·∫•y camera: " + ", ".join(f"{name} (Index {idx})" for idx, name in sorted(detected_cameras.items()))
             self.log_activity(log_msg)
        else:
             self.log_activity("üü† Kh√¥ng t√¨m th·∫•y camera n√†o ho·∫°t ƒë·ªông.")
        return detected_cameras

    @QtCore.pyqtSlot()
    def _refresh_camera_list(self):
        """Qu√©t l·∫°i camera v√† c·∫≠p nh·∫≠t ComboBox camera."""
        if self.processing or (self.cap and self.cap.isOpened()):
            self.log_activity("‚ÑπÔ∏è Kh√¥ng th·ªÉ l√†m m·ªõi danh s√°ch khi webcam ƒëang b·∫≠t ho·∫∑c ƒëang x·ª≠ l√Ω.")
            return

        # Qu√©t l·∫°i c√°c camera hi·ªán c√≥
        self.available_cameras = self._detect_available_cameras()

        # Ch·∫∑n t√≠n hi·ªáu c·ªßa ComboBox ƒë·ªÉ tr√°nh k√≠ch ho·∫°t _on_camera_selection_changed
        self.cameraSelectionComboBox.blockSignals(True)
        self.cameraSelectionComboBox.clear() # X√≥a c√°c m·ª•c c≈©

        # Th√™m c√°c camera t√¨m th·∫•y v√†o ComboBox
        if self.available_cameras:
            for index, name in sorted(self.available_cameras.items()):
                # Th√™m t√™n hi·ªÉn th·ªã v√† l∆∞u ch·ªâ s·ªë th·ª±c v√†o userData
                self.cameraSelectionComboBox.addItem(name, userData=index)

            # C·ªë g·∫Øng kh√¥i ph·ª•c l·ª±a ch·ªçn camera ƒë√£ l∆∞u trong config
            restored = False
            if self.selected_camera_index in self.available_cameras: # N·∫øu index ƒë√£ l∆∞u c√≤n t·ªìn t·∫°i
                for i in range(self.cameraSelectionComboBox.count()):
                    if self.cameraSelectionComboBox.itemData(i) == self.selected_camera_index:
                        self.cameraSelectionComboBox.setCurrentIndex(i) # Ch·ªçn l·∫°i m·ª•c ƒë√≥
                        restored = True
                        break
            if not restored and self.cameraSelectionComboBox.count() > 0:
                # N·∫øu kh√¥ng kh√¥i ph·ª•c ƒë∆∞·ª£c (index c≈© kh√¥ng c√≤n), ch·ªçn camera ƒë·∫ßu ti√™n trong danh s√°ch
                self.cameraSelectionComboBox.setCurrentIndex(0)
                new_default_index = self.cameraSelectionComboBox.itemData(0)
                # Ch·ªâ log v√† c·∫≠p nh·∫≠t n·∫øu index th·ª±c s·ª± thay ƒë·ªïi
                if self.selected_camera_index != new_default_index:
                     self.log_activity(f"‚ö†Ô∏è Camera ƒë√£ ch·ªçn (Index {self.selected_camera_index}) kh√¥ng c√≤n. Ch·ªçn m·∫∑c ƒë·ªãnh: {self.cameraSelectionComboBox.currentText()}")
                     self.selected_camera_index = new_default_index
                     self.config['selected_camera_index'] = self.selected_camera_index # C·∫≠p nh·∫≠t config

            # B·∫≠t c√°c control li√™n quan ƒë·∫øn camera
            self.cameraSelectionComboBox.setEnabled(True)
            self.refreshCamerasButton.setEnabled(True)
            self.ONCam.setEnabled(True) # B·∫≠t n√∫t B·∫≠t Webcam
        else:
            # N·∫øu kh√¥ng t√¨m th·∫•y camera n√†o
            self.cameraSelectionComboBox.addItem("Kh√¥ng t√¨m th·∫•y camera")
            self.cameraSelectionComboBox.setEnabled(False)
            self.refreshCamerasButton.setEnabled(True) # V·∫´n cho ph√©p refresh l·∫°i
            self.ONCam.setEnabled(False) # T·∫Øt n√∫t B·∫≠t Webcam
            # ƒê·∫∑t index v·ªÅ gi√° tr·ªã kh√¥ng h·ª£p l·ªá n·∫øu kh√¥ng c√≥ camera
            if self.selected_camera_index != -1:
                 self.selected_camera_index = -1
                 self.config['selected_camera_index'] = -1

        # B·ªè ch·∫∑n t√≠n hi·ªáu ComboBox
        self.cameraSelectionComboBox.blockSignals(False)
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i enable/disable chung (quan tr·ªçng sau khi refresh)
        self._update_controls_state()


    @QtCore.pyqtSlot(int)
    def _on_camera_selection_changed(self, index):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn camera kh√°c t·ª´ ComboBox."""
        # index l√† v·ªã tr√≠ trong combobox, kh√¥ng ph·∫£i index camera th·ª±c
        if index < 0: return # X·∫£y ra khi clear combobox

        selected_data = self.cameraSelectionComboBox.itemData(index)
        if selected_data is not None and isinstance(selected_data, int):
            new_index = selected_data
            # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu index th·ª±c s·ª± thay ƒë·ªïi so v·ªõi tr·∫°ng th√°i hi·ªán t·∫°i
            if self.selected_camera_index != new_index:
                self.selected_camera_index = new_index
                self.config['selected_camera_index'] = self.selected_camera_index # C·∫≠p nh·∫≠t config
                self.log_activity(f"üìπ ƒê√£ ch·ªçn camera: {self.cameraSelectionComboBox.currentText()} (Index: {self.selected_camera_index})")
                # self.save_config() # C√≥ th·ªÉ l∆∞u ngay
        else:
            # Tr∆∞·ªùng h·ª£p l·ªói: userData kh√¥ng ph·∫£i l√† s·ªë nguy√™n
            self.log_activity(f"‚ö†Ô∏è L·ªói: Kh√¥ng l·∫•y ƒë∆∞·ª£c index camera t·ª´ l·ª±a ch·ªçn '{self.cameraSelectionComboBox.currentText()}'")


    # --- UI Update and State Management ---
    def update_all_ui_elements(self):
        """C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c control tr√™n UI ƒë·ªÉ ph·∫£n √°nh tr·∫°ng th√°i/config hi·ªán t·∫°i."""
        # self.log_activity("‚ÑπÔ∏è C·∫≠p nh·∫≠t giao di·ªán ng∆∞·ªùi d√πng...") # C√≥ th·ªÉ b·ªè log n√†y n·∫øu qu√° nhi·ªÅu
        # Danh s√°ch c√°c control c·∫ßn ch·∫∑n t√≠n hi·ªáu khi c·∫≠p nh·∫≠t gi√° tr·ªã t·ª´ code
        controls_to_block = [
            self.comparisonMethodComboBox, self.ssimThresholdSpinBox, self.yoloConfidenceSpinBox,
            self.cooldownSpinBox, self.runtimeSpinBox, self.comPortComboBox, self.baudRateComboBox,
            self.cameraSelectionComboBox # Th√™m combobox camera
        ]
        # Ch·∫∑n t√≠n hi·ªáu
        for control in controls_to_block:
            if hasattr(self, control.objectName()): # Ki·ªÉm tra control t·ªìn t·∫°i
                 control.blockSignals(True)

        # C·∫≠p nh·∫≠t gi√° tr·ªã cho t·ª´ng control t·ª´ self.config ho·∫∑c bi·∫øn tr·∫°ng th√°i
        try:
            if hasattr(self, 'comparisonMethodComboBox'): self.comparisonMethodComboBox.setCurrentText(self.current_comparison_method)
            if hasattr(self, 'ssimThresholdSpinBox'): self.ssimThresholdSpinBox.setValue(self._current_ssim_threshold)
            if hasattr(self, 'yoloConfidenceSpinBox'): self.yoloConfidenceSpinBox.setValue(self.config.get('yolo_confidence', DEFAULT_YOLO_CONFIDENCE))
            if hasattr(self, 'cooldownSpinBox'): self.cooldownSpinBox.setValue(self._current_error_cooldown)
            if hasattr(self, 'runtimeSpinBox'): self.runtimeSpinBox.setValue(self._current_runtime_minutes)
            if hasattr(self, 'baudRateComboBox'): self.baudRateComboBox.setCurrentText(str(self.serial_baud_rate))

            # C·∫≠p nh·∫≠t ComboBox c·ªïng COM
            if hasattr(self, 'comPortComboBox'):
                # Danh s√°ch n√†y ƒë∆∞·ª£c refresh b·ªüi _refresh_com_ports, ch·ªâ c·∫ßn set index
                com_index = self.comPortComboBox.findText(self.serial_port_name if self.serial_port_name else "")
                if self.serial_port_name and com_index >= 0:
                    self.comPortComboBox.setCurrentIndex(com_index)
                elif self.comPortComboBox.count() > 0:
                    # N·∫øu c·ªïng l∆∞u kh√¥ng c√≥, kh√¥ng t·ª± ƒë·ªông ch·ªçn c·ªïng kh√°c ·ªü ƒë√¢y
                    # _refresh_com_ports s·∫Ω x·ª≠ l√Ω vi·ªác ch·ªçn c·ªïng m·∫∑c ƒë·ªãnh
                    pass

            # C·∫≠p nh·∫≠t ComboBox Camera
            if hasattr(self, 'cameraSelectionComboBox') and self.cameraSelectionComboBox.count() > 0:
                 found_cam_idx_in_combo = -1
                 for i in range(self.cameraSelectionComboBox.count()):
                     if self.cameraSelectionComboBox.itemData(i) == self.selected_camera_index:
                         found_cam_idx_in_combo = i
                         break
                 if found_cam_idx_in_combo != -1:
                      self.cameraSelectionComboBox.setCurrentIndex(found_cam_idx_in_combo)
                 # else: Index ƒë√£ l∆∞u kh√¥ng c√≥ trong list hi·ªán t·∫°i, gi·ªØ nguy√™n l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh c·ªßa _refresh

            # C·∫≠p nh·∫≠t label ƒë∆∞·ªùng d·∫´n model YOLO
            if hasattr(self, 'yoloModelPathLabel'):
                model_path = self.config.get('yolo_model_path')
                if model_path and isinstance(model_path, str):
                    # Ch·ªâ hi·ªÉn th·ªã t√™n file, tooltip l√† ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
                    base_name = os.path.basename(model_path)
                    self.yoloModelPathLabel.setText(base_name)
                    self.yoloModelPathLabel.setStyleSheet("font-style: normal; color: black;")
                    self.yoloModelPathLabel.setToolTip(model_path)
                else:
                    self.yoloModelPathLabel.setText("Ch∆∞a ch·ªçn model")
                    self.yoloModelPathLabel.setStyleSheet("font-style: italic; color: gray;")
                    self.yoloModelPathLabel.setToolTip("")

        except Exception as ui_update_err:
            self.log_activity(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t gi√° tr·ªã UI: {ui_update_err}")
            self.log_activity(traceback.format_exc()) # Log chi ti·∫øt l·ªói
        finally:
            # B·ªè ch·∫∑n t√≠n hi·ªáu (lu√¥n th·ª±c hi·ªán)
            for control in controls_to_block:
                if hasattr(self, control.objectName()): control.blockSignals(False)

        # C·∫≠p nh·∫≠t style c√°c n√∫t v√† hi·ªÉn th·ªã/·∫©n group
        self.update_button_styles()       # C√°c n√∫t ·∫£nh tham chi·∫øu, ROI, Folder
        self.update_toggle_button_text()  # N√∫t Start/Stop processing
        self.update_record_button_style() # N√∫t Record on error
        self.update_serial_button_style() # N√∫t Connect COM
        self._update_method_specific_ui() # ·∫®n/hi·ªán group SSIM/YOLO

        # B·∫≠t/t·∫Øt control d·ª±a tr√™n tr·∫°ng th√°i t·ªïng th·ªÉ (quan tr·ªçng)
        self._update_controls_state()
        # self.log_activity("‚ÑπÔ∏è C·∫≠p nh·∫≠t giao di·ªán ho√†n t·∫•t.")

    def _update_method_specific_ui(self):
        """Hi·ªÉn th·ªã/·∫©n c√°c group c·∫•u h√¨nh v√† n√∫t li√™n quan d·ª±a tr√™n ph∆∞∆°ng th·ª©c."""
        is_ssim = (self.current_comparison_method == METHOD_SSIM)
        is_yolo = (self.current_comparison_method == METHOD_YOLO)

        # ·∫®n/hi·ªán c√°c group config
        if hasattr(self, 'ssimGroup'): self.ssimGroup.setVisible(is_ssim)
        if hasattr(self, 'yoloGroup'): self.yoloGroup.setVisible(is_yolo)

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† tooltip c·ªßa c√°c n√∫t li√™n quan ƒë·∫øn SSIM
        # (V√¨ c√°c n√∫t n√†y c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng b·ªüi vi·ªác ch·ªçn ph∆∞∆°ng th·ª©c)
        self.update_button_styles()

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i enable/disable t·ªïng th·ªÉ
        self._update_controls_state()

    def _update_controls_state(self):
        """
        H√†m t·∫≠p trung c·∫≠p nh·∫≠t tr·∫°ng th√°i Enabled/Disabled c·ªßa c√°c control
        d·ª±a tr√™n c√°c tr·∫°ng th√°i: processing, webcam_running, serial_connected, etc.
        """
        webcam_is_running = self.cap is not None and self.cap.isOpened()
        is_busy_processing = self.processing
        is_busy = is_busy_processing or webcam_is_running # Busy n·∫øu ƒëang x·ª≠ l√Ω HO·∫∂C webcam ƒëang ch·∫°y
        can_config_general = not is_busy_processing # C√≥ th·ªÉ config n·∫øu kh√¥ng x·ª≠ l√Ω (cho ph√©p config khi webcam ch·∫°y)
        can_interact_webcam = not is_busy_processing # C√≥ th·ªÉ b·∫≠t/t·∫Øt/ch·ªçn webcam n·∫øu kh√¥ng x·ª≠ l√Ω

        is_ssim = self.current_comparison_method == METHOD_SSIM
        is_yolo = self.current_comparison_method == METHOD_YOLO
        has_cameras = bool(self.available_cameras)
        has_com_ports = hasattr(self, 'comPortComboBox') and self.comPortComboBox.count() > 0 and "Kh√¥ng t√¨m th·∫•y" not in self.comPortComboBox.itemText(0)


        # --- Left Panel Controls ---
        if hasattr(self, 'ONCam'): self.ONCam.setEnabled(can_interact_webcam and has_cameras and not webcam_is_running)
        if hasattr(self, 'OFFCam'): self.OFFCam.setEnabled(can_interact_webcam and webcam_is_running)
        if hasattr(self, 'cameraSelectionComboBox'): self.cameraSelectionComboBox.setEnabled(can_interact_webcam and has_cameras and not webcam_is_running)
        if hasattr(self, 'refreshCamerasButton'): self.refreshCamerasButton.setEnabled(can_interact_webcam and not webcam_is_running)

        # N√∫t ·∫£nh tham chi·∫øu SSIM (T·∫£i/Ch·ª•p)
        can_config_ssim_refs = can_config_general # Hi·ªán t·∫°i cho ph√©p load/ch·ª•p khi webcam ch·∫°y nh∆∞ng ko x·ª≠ l√Ω
        if hasattr(self, 'SettingButton_Norm'):
            for btn in [self.SettingButton_Norm, self.SettingButton_Shutdown, self.SettingButton_Fail]:
                btn.setEnabled(can_config_ssim_refs)
        if hasattr(self, 'CaptureButton_Norm'):
             for btn in [self.CaptureButton_Norm, self.CaptureButton_Shut, self.CaptureButton_Fail]:
                 # Ch·ªâ b·∫≠t ch·ª•p n·∫øu: kh√¥ng x·ª≠ l√Ω, webcam ƒëang ch·∫°y, V√Ä l√† mode SSIM
                 btn.setEnabled(can_config_ssim_refs and webcam_is_running and is_ssim)

        # ROI Button
        if hasattr(self, 'SettingButton_ROI_Webcam'):
             # B·∫≠t n·∫øu kh√¥ng x·ª≠ l√Ω v√† webcam ƒëang ch·∫°y
             self.SettingButton_ROI_Webcam.setEnabled(can_config_ssim_refs and webcam_is_running)

        # N√∫t th∆∞ m·ª•c l·ªói
        if hasattr(self, 'SaveButton'): self.SaveButton.setEnabled(can_config_general)
        # N√∫t Start/Stop processing - Logic n√†y ƒë√£ c√≥ trong update_toggle_button_text, nh∆∞ng setEnabled ·ªü ƒë√¢y
        # N√∫t Start ch·ªâ b·∫≠t khi kh√¥ng x·ª≠ l√Ω v√† c√°c ƒëi·ªÅu ki·ªán c·∫ßn ƒë√£ ƒë·ªß (c√≥ cam, folder, ·∫£nh ref/model...)
        # T·∫°m th·ªùi ch·ªâ b·∫≠t khi kh√¥ng processing
        if hasattr(self, 'ToggleProcessingButton'): self.ToggleProcessingButton.setEnabled(True) # B·∫≠t/t·∫Øt ch·ªß y·∫øu d·ª±a v√†o self.processing

        # --- Right Panel Controls ---
        if hasattr(self, 'comparisonMethodComboBox'): self.comparisonMethodComboBox.setEnabled(can_config_general)
        if hasattr(self, 'ssimGroup'): self.ssimGroup.setEnabled(can_config_general and is_ssim)
        if hasattr(self, 'yoloGroup'): self.yoloGroup.setEnabled(can_config_general and is_yolo)
        # Model path button trong YOLO group
        if hasattr(self, 'yoloModelPathButton'): self.yoloModelPathButton.setEnabled(can_config_general and is_yolo)

        # Common settings
        if hasattr(self, 'cooldownSpinBox'): self.cooldownSpinBox.setEnabled(can_config_general)
        if hasattr(self, 'runtimeSpinBox'): self.runtimeSpinBox.setEnabled(can_config_general)
        if hasattr(self, 'ToggleRecordOnErrorButton'): self.ToggleRecordOnErrorButton.setEnabled(can_config_general)

        # Serial configuration group
        can_config_serial = can_config_general and not self.serial_enabled # Config n·∫øu ko x·ª≠ l√Ω V√Ä ch∆∞a k·∫øt n·ªëi COM
        if hasattr(self, 'serialGroup'): self.serialGroup.setEnabled(can_config_general) # Group c√≥ th·ªÉ b·∫≠t ngay c·∫£ khi ƒë√£ k·∫øt n·ªëi (ƒë·ªÉ th·∫•y n√∫t Disconnect)
        if hasattr(self, 'comPortComboBox'): self.comPortComboBox.setEnabled(can_config_serial and has_com_ports)
        if hasattr(self, 'baudRateComboBox'): self.baudRateComboBox.setEnabled(can_config_serial and has_com_ports)
        if hasattr(self, 'refreshComButton'): self.refreshComButton.setEnabled(can_config_general and not self.serial_enabled) # Refresh ch·ªâ khi ko x·ª≠ l√Ω v√† ch∆∞a k·∫øt n·ªëi
        if hasattr(self, 'ToggleSerialPortButton'): self.ToggleSerialPortButton.setEnabled(can_config_general and has_com_ports) # N√∫t k·∫øt n·ªëi/ng·∫Øt k·∫øt n·ªëi b·∫≠t khi ko x·ª≠ l√Ω v√† c√≥ c·ªïng


    # --- Logging and Status Updates ---
    @QtCore.pyqtSlot(str)
    def log_activity(self, message):
        """Ghi log v√†o UI v√† file."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        full_message = f"{timestamp} - {message}"

        # C·∫≠p nh·∫≠t UI (ƒë·∫£m b·∫£o thread-safe)
        if hasattr(self, 'log_text_edit'):
            log_widget = self.log_text_edit
            if QtCore.QThread.currentThread() != log_widget.thread():
                # G·ªçi h√†m append v√† ensureCursorVisible tr√™n lu·ªìng c·ªßa widget
                QtCore.QMetaObject.invokeMethod(log_widget, "append", Qt.QueuedConnection, QtCore.Q_ARG(str, full_message))
                QtCore.QMetaObject.invokeMethod(log_widget, "ensureCursorVisible", Qt.QueuedConnection)
            else:
                # N·∫øu ƒëang ·ªü lu·ªìng ch√≠nh, g·ªçi tr·ª±c ti·∫øp
                log_widget.append(full_message)
                log_widget.ensureCursorVisible()

        # Ghi v√†o file log
        if self.log_file_path:
            try:
                # Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
                log_dir = os.path.dirname(self.log_file_path)
                if log_dir and not os.path.exists(log_dir):
                     try:
                         os.makedirs(log_dir, exist_ok=True)
                     except OSError as e:
                         # L·ªói khi t·∫°o th∆∞ m·ª•c, v√¥ hi·ªáu h√≥a ghi log v√† b√°o l·ªói 1 l·∫ßn
                         print(f"CRITICAL: L·ªói t·∫°o th∆∞ m·ª•c log '{log_dir}': {e}. V√¥ hi·ªáu h√≥a ghi file log.")
                         self.log_file_path = None
                         return # Kh√¥ng ghi file n·ªØa

                # M·ªü file ƒë·ªÉ ghi th√™m (append)
                with open(self.log_file_path, "a", encoding="utf-8") as log_file:
                    log_file.write(full_message + "\n")
            except Exception as e:
                # L·ªói nghi√™m tr·ªçng khi ghi log, th√¥ng b√°o tr√™n console v√† v√¥ hi·ªáu h√≥a ghi file
                print(f"CRITICAL: L·ªói ghi file log '{self.log_file_path}': {e}. V√¥ hi·ªáu h√≥a ghi log.")
                self.log_file_path = None # D·ª´ng ghi file n·∫øu c√≥ l·ªói

    @QtCore.pyqtSlot(ComparisonStatus, object)
    def update_status_label(self, status_enum, details_dict):
        """C·∫≠p nh·∫≠t QLabel hi·ªÉn th·ªã tr·∫°ng th√°i ch√≠nh (Normal, Fail, etc.)."""
        status_info = STATUS_MAP.get(status_enum, STATUS_MAP[ComparisonStatus.ERROR])
        message = status_info["label"]
        background_color = status_info["color"]

        # H√†m lambda ƒë·ªÉ c·∫≠p nh·∫≠t UI
        _update = lambda: (
            self.process_label.setText(f"Tr·∫°ng th√°i: {message}"),
            self.process_label.setStyleSheet(f"border:1px solid black; padding:5px; background-color:{background_color}; color:black; font-weight:bold; border-radius:3px;")
        )
        # ƒê·∫£m b·∫£o c·∫≠p nh·∫≠t tr√™n lu·ªìng ch√≠nh
        if hasattr(self, 'process_label'):
            if self.process_label.thread() != QtCore.QThread.currentThread():
                 # S·ª≠ d·ª•ng helper slot ƒë·ªÉ g·ªçi lambda tr√™n lu·ªìng ch√≠nh
                 QtCore.QMetaObject.invokeMethod(self, "_call_lambda_slot", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(object, _update))
            else:
                _update() # G·ªçi tr·ª±c ti·∫øp n·∫øu ƒëang ·ªü lu·ªìng ch√≠nh

    @QtCore.pyqtSlot(dict)
    def update_details_display(self, details):
         """C·∫≠p nh·∫≠t QLabel hi·ªÉn th·ªã chi ti·∫øt (SSIM score, YOLO detects)."""
         display_text = "Details: N/A" # M·∫∑c ƒë·ªãnh
         if details: # N·∫øu dictionary details kh√¥ng r·ªóng
             # ∆Øu ti√™n hi·ªÉn th·ªã l·ªói n·∫øu c√≥
             if 'error' in details:
                 display_text = f"Error: {details['error']}"
             # Hi·ªÉn th·ªã k·∫øt qu·∫£ YOLO
             elif 'detected' in details:
                 # S·∫Øp x·∫øp theo t√™n class ƒë·ªÉ hi·ªÉn th·ªã nh·∫•t qu√°n
                 det_items = sorted([f"{k}:{v}" for k,v in details['detected'].items()])
                 display_text = f"Detect: {', '.join(det_items) if det_items else 'None'}"
                 if 'count' in details: display_text += f" (Total: {details['count']})"
             # Hi·ªÉn th·ªã k·∫øt qu·∫£ SSIM
             elif 'ssim_norm' in details:
                 # Hi·ªÉn th·ªã c√°c score SSIM c√≥ s·∫µn
                 scores = []
                 if 'ssim_norm' in details and details['ssim_norm'] is not None: scores.append(f"N:{details['ssim_norm']:.4f}")
                 if 'ssim_shutdown' in details and details['ssim_shutdown'] is not None: scores.append(f"S:{details['ssim_shutdown']:.4f}")
                 if 'ssim_fail' in details and details['ssim_fail'] is not None: scores.append(f"F:{details['ssim_fail']:.4f}")
                 display_text = f"SSIM: {', '.join(scores)}" if scores else "SSIM: (Error)"

             # Th√™m l√Ω do (reason) n·∫øu c√≥ (t·ª´ logic check rule YOLO)
             if 'reason' in details:
                 display_text += f" [{details['reason']}]"

         # H√†m lambda ƒë·ªÉ c·∫≠p nh·∫≠t text c·ªßa label
         _update = lambda: self.details_label.setText(display_text)
         # ƒê·∫£m b·∫£o c·∫≠p nh·∫≠t tr√™n lu·ªìng ch√≠nh
         if hasattr(self, 'details_label'):
            if self.details_label.thread() != QtCore.QThread.currentThread():
                 QtCore.QMetaObject.invokeMethod(self, "_call_lambda_slot", QtCore.Qt.QueuedConnection, QtCore.Q_ARG(object, _update))
            else:
                _update()

    @QtCore.pyqtSlot(object)
    def _call_lambda_slot(self, f):
        """Slot tr·ª£ gi√∫p ƒë·ªÉ th·ª±c thi m·ªôt h√†m lambda ƒë∆∞·ª£c truy·ªÅn t·ª´ lu·ªìng kh√°c."""
        try:
            f()
        except Exception as e:
             self.log_activity(f"‚ùå L·ªói th·ª±c thi lambda tr√™n lu·ªìng ch√≠nh: {e}")
             self.log_activity(traceback.format_exc())

    # --- Button Style Updates ---
    def _set_button_style(self, button, base_text, icon="", state_text="", background_color="white", text_color="black"):
        """Helper function ƒë·ªÉ ƒë·∫∑t text v√† style cho n√∫t."""
        if not hasattr(self, button.objectName()): return # B·ªè qua n·∫øu n√∫t ch∆∞a ƒë∆∞·ª£c t·∫°o
        full_text = f"{icon} {base_text}".strip() + (f" ({state_text})" if state_text else "")
        button.setText(full_text)
        style = f"""
            QPushButton {{
                background-color: {background_color}; color: {text_color};
                border: 1px solid #ccc; border-radius: 3px; padding: 5px; /* Gi·∫£m padding */
                text-align: center;
            }}
            QPushButton:hover {{ background-color: #e8f0fe; }} /* M√†u nh·∫°t khi hover */
            QPushButton:pressed {{ background-color: #d0e0f8; }} /* M√†u ƒë·∫≠m h∆°n khi nh·∫•n */
            QPushButton:disabled {{
                background-color: #f0f0f0; color: #a0a0a0; border-color: #d0d0d0;
            }}
        """
        button.setStyleSheet(style)

    def update_button_styles(self):
        """C·∫≠p nh·∫≠t style cho c√°c n√∫t ·∫£nh tham chi·∫øu, ROI, th∆∞ m·ª•c l·ªói."""
        # N√∫t ·∫£nh tham chi·∫øu SSIM
        is_ssim = self.current_comparison_method == METHOD_SSIM
        button_map = {
            REF_NORM: (getattr(self, 'SettingButton_Norm', None), getattr(self, 'CaptureButton_Norm', None), "·∫¢nh Norm", "Ch·ª•p Norm"),
            REF_SHUTDOWN: (getattr(self, 'SettingButton_Shutdown', None), getattr(self, 'CaptureButton_Shut', None), "·∫¢nh Shutdown", "Ch·ª•p Shutdown"),
            REF_FAIL: (getattr(self, 'SettingButton_Fail', None), getattr(self, 'CaptureButton_Fail', None), "·∫¢nh Fail", "Ch·ª•p Fail"),
        }
        icon_load = "üìÇ"
        icon_capture = "üì∏"

        for key, (load_btn, cap_btn, load_txt, cap_txt) in button_map.items():
            if not load_btn or not cap_btn: continue # B·ªè qua n·∫øu n√∫t ch∆∞a t·ªìn t·∫°i

            has_image = isinstance(self.ref_data.get(key), np.ndarray) and self.ref_data[key].size > 0
            # ·∫¢nh ƒë∆∞·ª£c coi l√† t·ª´ file n·∫øu c√≥ ·∫£nh V√Ä c√≥ ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá trong config
            is_from_file = has_image and isinstance(self.config['ref_paths'].get(key), str) and os.path.isfile(self.config['ref_paths'][key])
            # Th√™m "(SSIM)" n·∫øu ph∆∞∆°ng th·ª©c hi·ªán t·∫°i kh√¥ng ph·∫£i SSIM
            hint = "" if is_ssim else "(SSIM)"

            # ƒê·∫∑t tooltip
            load_tooltip = f"T·∫£i ·∫£nh tham chi·∫øu {key} t·ª´ file" + (" (Ch·ªâ d√πng cho SSIM)" if not is_ssim else "")
            cap_tooltip = f"Ch·ª•p ·∫£nh tham chi·∫øu {key} t·ª´ webcam" + (" (Ch·ªâ d√πng cho SSIM)" if not is_ssim else "")
            load_btn.setToolTip(load_tooltip)
            cap_btn.setToolTip(cap_tooltip)

            # ƒê·∫∑t style v√† m√†u n·ªÅn
            load_state_text = "File" if is_from_file else ""
            load_bg = "lightgreen" if is_from_file and is_ssim else ("lightgray" if is_from_file else "white")
            self._set_button_style(load_btn, f"{load_txt} {hint}", icon_load, load_state_text, background_color=load_bg)

            cap_state_text = "Webcam" if has_image and not is_from_file else ""
            cap_bg = "lightblue" if has_image and not is_from_file and is_ssim else ("lightgray" if has_image and not is_from_file else "white")
            self._set_button_style(cap_btn, f"{cap_txt} {hint}", icon_capture, cap_state_text, background_color=cap_bg)

        # N√∫t ROI v√† Th∆∞ m·ª•c l·ªói
        if hasattr(self, 'SettingButton_ROI_Webcam'):
            roi_state = "ƒê√£ ch·ªçn" if self.webcam_roi else ""
            roi_bg = "lightblue" if self.webcam_roi else "white"
            self._set_button_style(self.SettingButton_ROI_Webcam, "Ch·ªçn ROI", "‚úÇÔ∏è", roi_state, background_color=roi_bg)

        if hasattr(self, 'SaveButton'):
            folder_state = "ƒê√£ ch·ªçn" if self.error_folder else ""
            folder_bg = "lightblue" if self.error_folder else "white"
            self._set_button_style(self.SaveButton, "Th∆∞ m·ª•c l·ªói", "üìÅ", folder_state, background_color=folder_bg)

    def update_toggle_button_text(self):
        """C·∫≠p nh·∫≠t text v√† m√†u n√∫t Start/Stop processing."""
        if hasattr(self, 'ToggleProcessingButton'):
            if self.processing:
                self._set_button_style(self.ToggleProcessingButton, "D·ª´ng X·ª≠ l√Ω", "‚èπ", background_color="orange")
            else:
                self._set_button_style(self.ToggleProcessingButton, "B·∫Øt ƒë·∫ßu", "‚ñ∂Ô∏è", background_color="lightgreen")

    def update_record_button_style(self):
        """C·∫≠p nh·∫≠t text v√† m√†u n√∫t Record on Error."""
        if hasattr(self, 'ToggleRecordOnErrorButton'):
            state = "B·∫≠t" if self._record_on_error_enabled else "T·∫Øt"
            color = "lightcoral" if self._record_on_error_enabled else "lightgray"
            self._set_button_style(self.ToggleRecordOnErrorButton, "Quay video l·ªói", "üé•", state, background_color=color)

    def update_serial_button_style(self):
        """C·∫≠p nh·∫≠t text v√† m√†u n√∫t K·∫øt n·ªëi/Ng·∫Øt k·∫øt n·ªëi COM."""
        if hasattr(self, 'ToggleSerialPortButton'):
            if self.serial_enabled:
                # ƒêang k·∫øt n·ªëi -> n√∫t ƒë·ªÉ Ng·∫Øt k·∫øt n·ªëi
                self._set_button_style(self.ToggleSerialPortButton, "Ng·∫Øt k·∫øt n·ªëi COM", "üîå", "ƒêang k·∫øt n·ªëi", background_color="lightcoral")
            else:
                # Ch∆∞a k·∫øt n·ªëi -> n√∫t ƒë·ªÉ K·∫øt n·ªëi
                has_ports = hasattr(self,'comPortComboBox') and self.comPortComboBox.count() > 0 and "Kh√¥ng t√¨m th·∫•y" not in self.comPortComboBox.itemText(0)
                state = "Ch∆∞a k·∫øt n·ªëi" if has_ports else "Kh√¥ng c√≥ c·ªïng"
                color = "lightgreen" if has_ports else "lightgray"
                self._set_button_style(self.ToggleSerialPortButton, "K·∫øt n·ªëi COM", "üîå", state, background_color=color)


    # --- Webcam Handling ---
    def start_webcam(self):
        """B·∫≠t webcam ƒë√£ ch·ªçn."""
        if self.cap is not None and self.cap.isOpened():
            self.log_activity("‚ö†Ô∏è Webcam ƒë√£ ƒë∆∞·ª£c b·∫≠t.")
            return

        # Ki·ªÉm tra xem camera h·ª£p l·ªá ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
        if self.selected_camera_index < 0 or self.selected_camera_index not in self.available_cameras:
             msg = "Vui l√≤ng ch·ªçn m·ªôt camera h·ª£p l·ªá t·ª´ danh s√°ch."
             if not self.available_cameras: msg = "Kh√¥ng t√¨m th·∫•y camera n√†o. H√£y th·ª≠ l√†m m·ªõi danh s√°ch (üîÑ)."
             self.log_activity(f"‚ùå {msg}")
             QMessageBox.warning(self, "Ch∆∞a Ch·ªçn Camera", msg)
             # T·ª± ƒë·ªông l√†m m·ªõi danh s√°ch n·∫øu ch∆∞a c√≥ l·ª±a ch·ªçn h·ª£p l·ªá
             if not self.available_cameras:
                 QTimer.singleShot(50, self._refresh_camera_list)
             return

        cam_index_to_use = self.selected_camera_index # L·∫•y index ƒë√£ ch·ªçn
        cam_display_name = self.cameraSelectionComboBox.currentText() # L·∫•y t√™n hi·ªÉn th·ªã

        # T·∫Øt c√°c control ch·ªçn camera tr∆∞·ªõc khi th·ª≠ m·ªü
        if hasattr(self,'cameraSelectionComboBox'): self.cameraSelectionComboBox.setEnabled(False)
        if hasattr(self,'refreshCamerasButton'): self.refreshCamerasButton.setEnabled(False)
        if hasattr(self,'ONCam'): self.ONCam.setEnabled(False) # T·∫°m th·ªùi disable n√∫t B·∫≠t

        try:
            # ∆Øu ti√™n c√°c backend API
            preferred_backends = [cv2.CAP_DSHOW, cv2.CAP_MSMF, cv2.CAP_ANY] # CAP_ANY l√† m·∫∑c ƒë·ªãnh
            self.cap = None
            opened_backend_name = "N/A"
            capture_opened_successfully = False

            self.log_activity(f"‚ÑπÔ∏è ƒêang th·ª≠ m·ªü '{cam_display_name}' (Index: {cam_index_to_use})...")
            for backend in preferred_backends:
                temp_cap = None # Reset temp_cap cho m·ªói l·∫ßn th·ª≠ backend
                try:
                    # Th·ª≠ m·ªü camera v·ªõi index v√† backend c·ª• th·ªÉ
                    temp_cap = cv2.VideoCapture(cam_index_to_use, backend)

                    # Ki·ªÉm tra xem c√≥ m·ªü ƒë∆∞·ª£c v√† ƒë·ªçc ƒë∆∞·ª£c frame kh√¥ng
                    if temp_cap and temp_cap.isOpened():
                        # Quan tr·ªçng: ƒê·ªçc th·ª≠ m·ªôt frame ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông
                        ret_test, frame_test = temp_cap.read()
                        if ret_test and frame_test is not None and frame_test.size > 0:
                            # M·ªü th√†nh c√¥ng V√Ä ƒë·ªçc ƒë∆∞·ª£c frame
                            self.cap = temp_cap # Gi·ªØ l·∫°i capture object n√†y
                            capture_opened_successfully = True
                            # C·ªë g·∫Øng l·∫•y t√™n backend (c√≥ th·ªÉ th·∫•t b·∫°i)
                            try: opened_backend_name = self.cap.getBackendName()
                            except: opened_backend_name = f"API_{backend}" # T√™n thay th·∫ø n·∫øu getBackendName l·ªói
                            self.log_activity(f"‚úÖ M·ªü th√†nh c√¥ng '{cam_display_name}' v·ªõi backend: {opened_backend_name}")
                            break # Tho√°t v√≤ng l·∫∑p backend khi ƒë√£ th√†nh c√¥ng
                        else:
                             # M·ªü ƒë∆∞·ª£c nh∆∞ng kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame -> gi·∫£i ph√≥ng v√† th·ª≠ backend kh√°c
                             if temp_cap: temp_cap.release()
                             self.log_activity(f"‚ÑπÔ∏è Backend {backend} cho '{cam_display_name}' m·ªü ƒë∆∞·ª£c nh∆∞ng kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame.")
                    elif temp_cap:
                        # isOpened() tr·∫£ v·ªÅ False -> gi·∫£i ph√≥ng
                        temp_cap.release()

                except Exception as cam_err:
                    # L·ªói trong qu√° tr√¨nh th·ª≠ m·ªü (v√≠ d·ª•: backend kh√¥ng h·ªó tr·ª£)
                    self.log_activity(f"‚ÑπÔ∏è L·ªói khi th·ª≠ '{cam_display_name}' v·ªõi backend {backend}: {cam_err}")
                    if temp_cap: # ƒê·∫£m b·∫£o ƒë√≥ng n·∫øu l·ªói x·∫£y ra sau khi t·∫°o
                        try: temp_cap.release()
                        except Exception: pass

            # Ki·ªÉm tra sau khi th·ª≠ h·∫øt c√°c backend
            if not capture_opened_successfully or self.cap is None or not self.cap.isOpened():
                 raise IOError(f"Kh√¥ng th·ªÉ m·ªü '{cam_display_name}' ho·∫∑c ƒë·ªçc frame ban ƒë·∫ßu sau khi th·ª≠ c√°c backend.")

            # --- Webcam ƒë√£ m·ªü th√†nh c√¥ng ---
            # L·∫•y th√¥ng tin k√≠ch th∆∞·ªõc v√† FPS
            w = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            h = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
            # C·ªë g·∫Øng ƒë·∫∑t FPS mong mu·ªën (kh√¥ng ph·∫£i l√∫c n√†o c≈©ng th√†nh c√¥ng)
            requested_fps = 15.0
            set_fps_success = self.cap.set(cv2.CAP_PROP_FPS, requested_fps)
            actual_fps = self.cap.get(cv2.CAP_PROP_FPS)
            # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c FPS, FPS=0 ho·∫∑c qu√° th·∫•p, d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
            if not actual_fps or actual_fps < 1: actual_fps = requested_fps
            self.webcam_fps = actual_fps
            # T√≠nh kho·∫£ng th·ªùi gian timer (ms), t·ªëi thi·ªÉu ~30fps, t·ªëi ƒëa 1s
            timer_interval = max(33, min(1000, int(1000 / self.webcam_fps)))

            self.log_activity(f"üöÄ Webcam '{cam_display_name}' ƒë√£ b·∫≠t (Backend: {opened_backend_name}, Res: {w}x{h}, FPS: {self.webcam_fps:.1f}, Interval: {timer_interval}ms)")

            # B·∫Øt ƒë·∫ßu timer ƒë·ªçc frame
            self.frame_timer.start(timer_interval)

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t B·∫≠t/T·∫Øt webcam
            if hasattr(self,'ONCam'): self.ONCam.setEnabled(False)
            if hasattr(self,'OFFCam'): self.OFFCam.setEnabled(True)

            # ƒê·∫∑t n·ªÅn ƒëen cho khu v·ª±c hi·ªÉn th·ªã video
            if hasattr(self,'graphicsView'): self.graphicsView.setBackgroundBrush(QtGui.QBrush(Qt.black))

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i enable/disable t·ªïng th·ªÉ
            self._update_controls_state()

        except Exception as e:
            # B·∫Øt l·ªói t·ªïng th·ªÉ khi b·∫≠t webcam
            emsg = f"‚ùå L·ªói nghi√™m tr·ªçng khi b·∫≠t webcam '{cam_display_name}': {e}"
            self.log_activity(emsg)
            self.log_activity(traceback.format_exc())
            QMessageBox.critical(self, "L·ªói Webcam", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông camera ƒë√£ ch·ªçn.\nChi ti·∫øt: {e}\n\nVui l√≤ng ki·ªÉm tra k·∫øt n·ªëi, driver ho·∫∑c th·ª≠ ch·ªçn camera kh√°c.")
            # ƒê·∫£m b·∫£o d·ªçn d·∫πp n·∫øu c√≥ l·ªói
            if self.cap:
                 try: self.cap.release()
                 except: pass
                 self.cap = None

            # B·∫≠t l·∫°i c√°c control ch·ªçn camera ƒë·ªÉ ng∆∞·ªùi d√πng th·ª≠ l·∫°i
            has_cameras_after_error = bool(self.available_cameras)
            if hasattr(self,'cameraSelectionComboBox'): self.cameraSelectionComboBox.setEnabled(has_cameras_after_error)
            if hasattr(self,'refreshCamerasButton'): self.refreshCamerasButton.setEnabled(True)
            if hasattr(self,'ONCam'): self.ONCam.setEnabled(has_cameras_after_error) # B·∫≠t l·∫°i n√∫t B·∫≠t n·∫øu c√≥ cam
            if hasattr(self,'OFFCam'): self.OFFCam.setEnabled(False)
            if hasattr(self,'graphicsView'): self.graphicsView.setBackgroundBrush(QtGui.QBrush(Qt.darkGray))

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i enable/disable t·ªïng th·ªÉ
            self._update_controls_state()

            # C√≥ th·ªÉ c√¢n nh·∫Øc t·ª± ƒë·ªông l√†m m·ªõi danh s√°ch camera ·ªü ƒë√¢y
            QTimer.singleShot(50, self._refresh_camera_list)


    def update_frame(self):
        """ƒê·ªçc frame t·ª´ webcam, hi·ªÉn th·ªã v√† ƒë∆∞a v√†o queue x·ª≠ l√Ω."""
        if self.cap is None or not self.cap.isOpened(): return # Ch∆∞a c√≥ webcam ho·∫∑c ƒë√£ b·ªã l·ªói

        # ƒê·ªçc frame t·ª´ webcam
        ret, frame = self.cap.read()
        if not ret or frame is None or frame.size == 0:
            # Log l·ªói ƒë·ªçc frame ƒë·ªãnh k·ª≥ ƒë·ªÉ tr√°nh spam console/log file
            current_time = time.time()
            if not hasattr(self, '_last_read_error_log_time') or current_time - getattr(self, '_last_read_error_log_time', 0) > 10:
                self.log_activity("‚ö†Ô∏è L·ªói ƒë·ªçc frame t·ª´ webcam.")
                setattr(self, '_last_read_error_log_time', current_time)
            # C√¢n nh·∫Øc d·ª´ng webcam n·∫øu l·ªói ƒë·ªçc li√™n t·ª•c? Hi·ªán t·∫°i ch·ªâ b·ªè qua frame l·ªói.
            return

        # X√≥a c·ªù l·ªói n·∫øu ƒë·ªçc th√†nh c√¥ng
        if hasattr(self, '_last_read_error_log_time'): delattr(self, '_last_read_error_log_time')

        try:
            display_frame = frame.copy() # Frame ƒë·ªÉ hi·ªÉn th·ªã (c√≥ th·ªÉ v·∫Ω ROI)
            processing_frame = frame     # Frame ƒë·ªÉ x·ª≠ l√Ω (c√≥ th·ªÉ b·ªã crop b·ªüi ROI)

            # 1. √Åp d·ª•ng ROI n·∫øu c√≥
            if self.webcam_roi:
                x, y, w, h = self.webcam_roi
                fh_orig, fw_orig = frame.shape[:2] # K√≠ch th∆∞·ªõc frame g·ªëc
                # ƒê·∫£m b·∫£o ROI n·∫±m trong gi·ªõi h·∫°n frame g·ªëc
                x1, y1 = max(0, int(x)), max(0, int(y))
                x2, y2 = min(fw_orig, int(x + w)), min(fh_orig, int(y + h))
                # Ch·ªâ crop v√† v·∫Ω n·∫øu ROI h·ª£p l·ªá (c√≥ chi·ªÅu r·ªông v√† cao > 0)
                if x2 > x1 and y2 > y1:
                    # Crop frame cho vi·ªác x·ª≠ l√Ω
                    processing_frame = frame[y1:y2, x1:x2]
                    # V·∫Ω h√¨nh ch·ªØ nh·∫≠t ROI l√™n frame hi·ªÉn th·ªã
                    cv2.rectangle(display_frame, (x1, y1), (x2, y2), (0, 255, 0), 2) # M√†u xanh l√°, ƒë·ªô d√†y 2
                else:
                     # ROI kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng frame ƒë·∫ßy ƒë·ªß ƒë·ªÉ x·ª≠ l√Ω
                     processing_frame = frame
                     # Log l·ªói ROI ƒë·ªãnh k·ª≥
                     current_time = time.time()
                     if not hasattr(self,'_last_roi_error_log_time') or current_time - getattr(self,'_last_roi_error_log_time', 0) > 15:
                         self.log_activity(f"‚ö†Ô∏è ROI {self.webcam_roi} kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng frame ƒë·∫ßy ƒë·ªß.")
                         setattr(self,'_last_roi_error_log_time', current_time)
            # else: # Kh√¥ng c√≥ ROI -> kh√¥ng c·∫ßn l√†m g√¨

            # 2. Hi·ªÉn th·ªã frame (display_frame) l√™n QGraphicsView
            # Chuy·ªÉn ƒë·ªïi m√†u t·ª´ BGR (OpenCV) sang RGB (Qt)
            try:
                 frame_rgb = cv2.cvtColor(display_frame, cv2.COLOR_BGR2RGB)
                 h_disp, w_disp, ch_disp = frame_rgb.shape
                 bytes_per_line = ch_disp * w_disp
                 # T·∫°o QImage t·ª´ d·ªØ li·ªáu numpy
                 qt_image = QtGui.QImage(frame_rgb.data, w_disp, h_disp, bytes_per_line, QtGui.QImage.Format_RGB888)
                 # T·∫°o QPixmap v√† scale ƒë·ªÉ v·ª´a v·ªõi view
                 view_w = self.graphicsView.viewport().width()
                 view_h = self.graphicsView.viewport().height()
                 # Tr·ª´ vi·ªÅn 1px m·ªói b√™n ƒë·ªÉ kh√¥ng b·ªã tr√†n
                 pixmap = QtGui.QPixmap.fromImage(qt_image).scaled(max(1, view_w - 2), max(1, view_h - 2),
                                                                   Qt.KeepAspectRatio, Qt.SmoothTransformation)

                 # C·∫≠p nh·∫≠t QGraphicsPixmapItem (t·∫°o n·∫øu ch∆∞a c√≥)
                 if self.pixmap_item is None:
                     self.pixmap_item = QtWidgets.QGraphicsPixmapItem(pixmap)
                     self.scene.addItem(self.pixmap_item)
                     # T·ª± ƒë·ªông cƒÉn gi·ªØa v√† scale ph√π h·ª£p l·∫ßn ƒë·∫ßu
                     self.graphicsView.fitInView(self.pixmap_item, Qt.KeepAspectRatio)
                 else:
                     self.pixmap_item.setPixmap(pixmap)
                     # Kh√¥ng c·∫ßn fitInView li√™n t·ª•c tr·ª´ khi k√≠ch th∆∞·ªõc view thay ƒë·ªïi l·ªõn
                     # CƒÉn ch·ªânh v·ªã tr√≠ n·∫øu c·∫ßn (v√≠ d·ª•, n·∫øu scale thay ƒë·ªïi nhi·ªÅu)
                     # C√≥ th·ªÉ t√≠nh to√°n ƒë·ªÉ lu√¥n gi·ªØ ·ªü gi·ªØa view
                     px = (self.graphicsView.viewport().width() - pixmap.width()) / 2
                     py = (self.graphicsView.viewport().height() - pixmap.height()) / 2
                     self.pixmap_item.setPos(px, py)

            except cv2.error as cv_err:
                 # Log l·ªói chuy·ªÉn ƒë·ªïi m√†u
                 current_time = time.time()
                 if not hasattr(self,'_last_cvt_error_log') or current_time-getattr(self,'_last_cvt_error_log',0) > 10:
                     self.log_activity(f"‚ö†Ô∏è L·ªói chuy·ªÉn ƒë·ªïi m√†u frame hi·ªÉn th·ªã: {cv_err}")
                     setattr(self,'_last_cvt_error_log', current_time)
            except Exception as qt_img_err:
                 # Log l·ªói t·∫°o QImage/QPixmap
                 current_time = time.time()
                 if not hasattr(self,'_last_qtimg_error_log') or current_time-getattr(self,'_last_qtimg_error_log',0) > 10:
                      self.log_activity(f"‚ö†Ô∏è L·ªói t·∫°o ·∫£nh Qt ƒë·ªÉ hi·ªÉn th·ªã: {qt_img_err}")
                      setattr(self,'_last_qtimg_error_log', current_time)


            # 3. X·ª≠ l√Ω ghi video (n·∫øu ƒëang b·∫≠t ch·∫ø ƒë·ªô ghi l·ªói V√Ä ƒëang x·ª≠ l√Ω)
            if self.processing and self._record_on_error_enabled:
                # Kh·ªüi t·∫°o VideoWriter n·∫øu ch∆∞a c√≥ V√Ä ƒë√£ c√≥ th∆∞ m·ª•c l·ªói
                if self.video_writer is None:
                    if self.error_folder and os.path.isdir(self.error_folder):
                        try:
                            vid_h, vid_w = processing_frame.shape[:2] # K√≠ch th∆∞·ªõc video = frame x·ª≠ l√Ω
                            # Ki·ªÉm tra k√≠ch th∆∞·ªõc h·ª£p l·ªá
                            if vid_w <= 0 or vid_h <= 0:
                                raise ValueError("K√≠ch th∆∞·ªõc frame x·ª≠ l√Ω kh√¥ng h·ª£p l·ªá ƒë·ªÉ ghi video.")

                            # T·∫°o th∆∞ m·ª•c con cho video n·∫øu ch∆∞a c√≥
                            video_dir = os.path.join(self.error_folder, VIDEO_SUBFOLDER)
                            os.makedirs(video_dir, exist_ok=True) # T·∫°o n·∫øu ch∆∞a c√≥

                            timestamp = time.strftime('%Y%m%d_%H%M%S')
                            video_filename = f"error_rec_{timestamp}.mp4" # D√πng mp4 l√†m m·∫∑c ƒë·ªãnh
                            self.current_video_path = os.path.join(video_dir, video_filename)

                            # Ch·ªçn codec (th·ª≠ mp4v, n·∫øu kh√¥ng ƒë∆∞·ª£c c√≥ th·ªÉ d√πng avc1 ho·∫∑c XVID cho avi)
                            # fourcc = cv2.VideoWriter_fourcc(*'mp4v') # Ho·∫∑c 'avc1', 'XVID'
                            fourcc = cv2.VideoWriter_fourcc(*'avc1') # Th∆∞·ªùng t∆∞∆°ng th√≠ch t·ªët h∆°n tr√™n nhi·ªÅu n·ªÅn t·∫£ng
                            if fourcc == -1: # N·∫øu codec kh√¥ng t·ªìn t·∫°i, th·ª≠ codec kh√°c
                                self.log_activity("‚ö†Ô∏è Codec 'avc1' kh√¥ng kh·∫£ d·ª•ng, th·ª≠ 'mp4v'.")
                                fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                                if fourcc == -1:
                                    self.log_activity("‚ö†Ô∏è Codec 'mp4v' c≈©ng kh√¥ng kh·∫£ d·ª•ng. Ghi video c√≥ th·ªÉ th·∫•t b·∫°i.")

                            # ƒê·∫£m b·∫£o FPS h·ª£p l·ªá (√≠t nh·∫•t 1 FPS)
                            record_fps = max(1.0, min(30.0, self.webcam_fps)) # Gi·ªõi h·∫°n FPS ghi

                            self.video_writer = cv2.VideoWriter(self.current_video_path, fourcc, record_fps, (vid_w, vid_h))

                            if self.video_writer.isOpened():
                                self.log_activity(f"üî¥ B·∫Øt ƒë·∫ßu ghi video l·ªói: {video_filename} ({vid_w}x{vid_h} @{record_fps:.1f}fps)")
                                self.error_occurred_during_recording = False # Reset c·ªù l·ªói cho file m·ªõi
                            else:
                                self.log_activity(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o VideoWriter cho {video_filename}")
                                self.video_writer = None; self.current_video_path = None
                        except ValueError as ve:
                            self.log_activity(f"‚ùå L·ªói t·∫°o VideoWriter: {ve}")
                            self.video_writer = None; self.current_video_path = None
                        except Exception as e_vid:
                            self.log_activity(f"‚ùå L·ªói nghi√™m tr·ªçng khi t·∫°o VideoWriter: {e_vid}")
                            self.log_activity(traceback.format_exc())
                            self.video_writer = None; self.current_video_path = None
                    else:
                        # Ch∆∞a c·∫•u h√¨nh th∆∞ m·ª•c l·ªói, log c·∫£nh b√°o ƒë·ªãnh k·ª≥
                        current_time = time.time()
                        if not hasattr(self,'_last_vid_folder_err_log') or current_time - getattr(self,'_last_vid_folder_err_log', 0) > 30:
                            self.log_activity("‚ö†Ô∏è Ch∆∞a ƒë·∫∑t th∆∞ m·ª•c l·ªói h·ª£p l·ªá ƒë·ªÉ ghi video.")
                            setattr(self,'_last_vid_folder_err_log', current_time)

                # Ghi frame v√†o video n·∫øu VideoWriter ƒë√£ ƒë∆∞·ª£c m·ªü
                if self.video_writer and self.video_writer.isOpened():
                    try:
                        self.video_writer.write(processing_frame)
                    except Exception as e_write:
                        # Log l·ªói ghi frame, c√≥ th·ªÉ d·ª´ng ghi n·∫øu l·ªói li√™n t·ª•c
                        current_time = time.time()
                        if not hasattr(self,'_last_vid_write_err_log') or current_time - getattr(self,'_last_vid_write_err_log',0) > 10:
                           self.log_activity(f"‚ùå L·ªói ghi frame video: {e_write}")
                           setattr(self,'_last_vid_write_err_log', current_time)
                        # C√¢n nh·∫Øc ƒë√≥ng VideoWriter n·∫øu l·ªói ghi? Hi·ªán t·∫°i ch·ªâ log.

            # 4. ƒê∆∞a frame v√†o queue cho worker (n·∫øu ƒëang x·ª≠ l√Ω)
            if self.processing:
                # T·∫°o b·∫£n sao frame ƒë·ªÉ g·ª≠i ƒëi, ƒë·∫£m b·∫£o thread-safe
                # G·ª≠i frame ƒë√£ ƒë∆∞·ª£c crop ROI (n·∫øu c√≥)
                frame_to_process = processing_frame.copy()
                try:
                    # ƒê·∫∑t v√†o queue, kh√¥ng ch·∫∑n n·∫øu ƒë·∫ßy
                    self.frame_queue.put(frame_to_process, block=False, timeout=0.01) # Timeout nh·ªè ph√≤ng tr∆∞·ªùng h·ª£p hi·∫øm
                    if hasattr(self, '_last_queue_full_log'): delattr(self,'_last_queue_full_log') # Reset c·ªù log queue ƒë·∫ßy
                except Full:
                    # Queue ƒë·∫ßy, frame b·ªã b·ªè qua, log ƒë·ªãnh k·ª≥
                    current_time = time.time()
                    if not hasattr(self, '_last_queue_full_log') or current_time - getattr(self, '_last_queue_full_log', 0) > 5:
                         self.log_activity("‚ö†Ô∏è Queue x·ª≠ l√Ω ƒë·∫ßy, frame b·ªã b·ªè qua.")
                         setattr(self, '_last_queue_full_log', current_time)
                except Exception as q_put_err:
                     # L·ªói kh√°c khi ƒë∆∞a v√†o queue (hi·∫øm g·∫∑p)
                     current_time = time.time()
                     if not hasattr(self,'_last_q_put_err_log') or current_time - getattr(self,'_last_q_put_err_log', 0) > 10:
                        self.log_activity(f"‚ùå L·ªói ƒë∆∞a frame v√†o queue: {q_put_err}")
                        setattr(self,'_last_q_put_err_log', current_time)

        except Exception as e:
            # B·∫Øt l·ªói chung trong qu√° tr√¨nh update_frame (v√≠ d·ª•: l·ªói numpy, ROI,...)
            current_time = time.time()
            if not hasattr(self,'_last_update_frame_err_log') or current_time - getattr(self,'_last_update_frame_err_log', 0) > 10:
                 self.log_activity(f"‚ùå L·ªói trong update_frame: {e}")
                 self.log_activity(traceback.format_exc())
                 setattr(self,'_last_update_frame_err_log', current_time)


    def stop_webcam(self):
        """D·ª´ng webcam ƒëang ch·∫°y v√† d·ªçn d·∫πp t√†i nguy√™n."""
        # L·∫•y t√™n camera ƒëang ch·∫°y ƒë·ªÉ log
        current_cam_text = "Unknown Camera"
        if self.cap and hasattr(self,'cameraSelectionComboBox'):
            # T√¨m item trong combobox kh·ªõp v·ªõi index ƒëang d√πng (selected_camera_index)
            for i in range(self.cameraSelectionComboBox.count()):
                 item_data = self.cameraSelectionComboBox.itemData(i)
                 if item_data is not None and item_data == self.selected_camera_index:
                      current_cam_text = self.cameraSelectionComboBox.itemText(i)
                      break # T√¨m th·∫•y

        if self.cap and self.cap.isOpened():
            try:
                self.frame_timer.stop() # D·ª´ng timer ƒë·ªçc frame tr∆∞·ªõc
                # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ frame ƒëang x·ª≠ l√Ω (n·∫øu c√≥) ho√†n t·∫•t ƒë·ªçc
                # QtCore.QCoreApplication.processEvents() # C√≥ th·ªÉ kh√¥ng c·∫ßn
                time.sleep(0.05) # Ch·ªù ng·∫Øn
                self.cap.release() # Gi·∫£i ph√≥ng thi·∫øt b·ªã camera
            except Exception as e:
                 self.log_activity(f"‚ö†Ô∏è L·ªói khi d·ª´ng webcam '{current_cam_text}': {e}")
            finally:
                 self.cap = None # ƒê·∫∑t l·∫°i c·ªù cap
                 # D·ªçn d·∫πp scene v√† hi·ªÉn th·ªã
                 if hasattr(self, 'scene'): self.scene.clear(); self.pixmap_item = None
                 if hasattr(self, 'graphicsView'): self.graphicsView.setBackgroundBrush(QtGui.QBrush(Qt.darkGray))
                 self.log_activity(f"üö´ Webcam '{current_cam_text}' ƒë√£ t·∫Øt.")

                 # C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t v√† control ch·ªçn camera
                 has_cameras = bool(self.available_cameras)
                 if hasattr(self,'ONCam'): self.ONCam.setEnabled(has_cameras) # B·∫≠t n√∫t B·∫≠t n·∫øu c√≥ cam
                 if hasattr(self,'OFFCam'): self.OFFCam.setEnabled(False)
                 if hasattr(self,'cameraSelectionComboBox'): self.cameraSelectionComboBox.setEnabled(has_cameras) # B·∫≠t l·∫°i ch·ªçn cam
                 if hasattr(self,'refreshCamerasButton'): self.refreshCamerasButton.setEnabled(True) # B·∫≠t l·∫°i n√∫t refresh

                 # T·ª± ƒë·ªông d·ª´ng x·ª≠ l√Ω n·∫øu ƒëang ch·∫°y (quan tr·ªçng)
                 if self.processing:
                     self.log_activity("‚ÑπÔ∏è T·ª± ƒë·ªông d·ª´ng x·ª≠ l√Ω do webcam t·∫Øt.")
                     self.toggle_processing() # G·ªçi h√†m d·ª´ng chu·∫©n

                 # C·∫≠p nh·∫≠t tr·∫°ng th√°i enable/disable t·ªïng th·ªÉ
                 self._update_controls_state()

        elif self.cap is None:
             self.log_activity("‚ÑπÔ∏è Webcam ch∆∞a ƒë∆∞·ª£c b·∫≠t ƒë·ªÉ d·ª´ng.")
             # ƒê·∫£m b·∫£o c√°c n√∫t ·ªü tr·∫°ng th√°i ƒë√∫ng
             has_cameras = bool(self.available_cameras)
             if hasattr(self,'ONCam'): self.ONCam.setEnabled(has_cameras)
             if hasattr(self,'OFFCam'): self.OFFCam.setEnabled(False)
             if hasattr(self,'cameraSelectionComboBox'): self.cameraSelectionComboBox.setEnabled(has_cameras)
             if hasattr(self,'refreshCamerasButton'): self.refreshCamerasButton.setEnabled(True)
             self._update_controls_state()
        # else: self.cap t·ªìn t·∫°i nh∆∞ng not isOpened() -> tr·∫°ng th√°i l·ªói, kh√¥ng c·∫ßn l√†m g√¨ th√™m


    # --- Reference Image Handling (SSIM) ---
    def load_reference_image(self, img_type):
        """T·∫£i ·∫£nh tham chi·∫øu (Norm, Shutdown, Fail) cho SSIM t·ª´ file."""
        if self.processing:
             QMessageBox.warning(self, "ƒêang x·ª≠ l√Ω", "Kh√¥ng th·ªÉ thay ƒë·ªïi ·∫£nh tham chi·∫øu khi ƒëang x·ª≠ l√Ω.")
             return
        # Lu√¥n cho ph√©p t·∫£i ·∫£nh, nh∆∞ng c·∫£nh b√°o n·∫øu kh√¥ng ·ªü mode SSIM
        if self.current_comparison_method != METHOD_SSIM:
             QMessageBox.information(self, "Th√¥ng tin", f"·∫¢nh tham chi·∫øu '{img_type}' hi·ªán ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho ph∆∞∆°ng th·ª©c {METHOD_SSIM}.")

        opts = QFileDialog.Options()
        # Th∆∞ m·ª•c g·ª£i √Ω: th∆∞ m·ª•c c·ªßa ·∫£nh c≈© -> th∆∞ m·ª•c l·ªói -> th∆∞ m·ª•c ng∆∞·ªùi d√πng
        suggested_dir = os.path.expanduser("~") # M·∫∑c ƒë·ªãnh
        current_path = self.config['ref_paths'].get(img_type)
        if current_path and os.path.exists(os.path.dirname(current_path)):
            suggested_dir = os.path.dirname(current_path)
        elif self.error_folder and os.path.exists(self.error_folder):
            suggested_dir = self.error_folder

        # M·ªü dialog ch·ªçn file ·∫£nh
        fp, _ = QFileDialog.getOpenFileName(
            self, f"Ch·ªçn ·∫£nh tham chi·∫øu '{img_type}' (cho SSIM)", suggested_dir,
            "Images (*.png *.jpg *.jpeg *.bmp *.webp);;All Files (*)", options=opts)

        if fp: # N·∫øu ng∆∞·ªùi d√πng ch·ªçn file
            try:
                # ƒê·ªçc ·∫£nh b·∫±ng c√°ch an to√†n v·ªõi ƒë∆∞·ªùng d·∫´n Unicode
                img_bytes = np.fromfile(fp, dtype=np.uint8)
                img = cv2.imdecode(img_bytes, cv2.IMREAD_COLOR)
                if img is None:
                    raise ValueError("Kh√¥ng th·ªÉ gi·∫£i m√£ file ·∫£nh ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")

                # C·∫≠p nh·∫≠t d·ªØ li·ªáu ·∫£nh v√† ƒë∆∞·ªùng d·∫´n trong config
                self.ref_data[img_type] = img
                self.config['ref_paths'][img_type] = fp # L∆∞u ƒë∆∞·ªùng d·∫´n m·ªõi
                self.update_button_styles() # C·∫≠p nh·∫≠t giao di·ªán n√∫t
                self.log_activity(f"‚úÖ ƒê√£ t·∫£i ·∫£nh '{img_type}' (SSIM) t·ª´: {os.path.basename(fp)}")
                # self.save_config() # L∆∞u config n·∫øu mu·ªën

            except Exception as e:
                # X·ª≠ l√Ω l·ªói khi t·∫£i ho·∫∑c gi·∫£i m√£ ·∫£nh
                self.log_activity(f"‚ùå L·ªói t·∫£i ·∫£nh {img_type} t·ª´ '{fp}': {e}")
                QMessageBox.warning(self, "L·ªói T·∫£i ·∫¢nh", f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh:\n{fp}\n\nL·ªói: {e}")
                # C√¢n nh·∫Øc x√≥a ·∫£nh v√† ƒë∆∞·ªùng d·∫´n c≈© n·∫øu t·∫£i l·ªói?
                # self.config['ref_paths'][img_type] = None
                # self.ref_data[img_type] = None
                # self.update_button_styles()


    def capture_reference_from_webcam(self, img_type):
        """Ch·ª•p ·∫£nh tham chi·∫øu (Norm, Shutdown, Fail) cho SSIM t·ª´ webcam ƒëang ch·∫°y."""
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if not self.cap or not self.cap.isOpened():
             QMessageBox.warning(self,"Webcam Ch∆∞a B·∫≠t","Vui l√≤ng b·∫≠t webcam tr∆∞·ªõc khi ch·ª•p.")
             return
        if self.processing:
             QMessageBox.warning(self,"ƒêang X·ª≠ L√Ω","Kh√¥ng th·ªÉ ch·ª•p ·∫£nh khi ƒëang x·ª≠ l√Ω.")
             return
        # V·∫´n cho ph√©p ch·ª•p ·∫£nh, nh∆∞ng c·∫£nh b√°o n·∫øu kh√¥ng ·ªü mode SSIM
        if self.current_comparison_method != METHOD_SSIM:
             QMessageBox.information(self, "Th√¥ng tin", f"Ch·ª•p ·∫£nh tham chi·∫øu '{img_type}' hi·ªán ch·ªâ √°p d·ª•ng cho ph∆∞∆°ng th·ª©c {METHOD_SSIM}.")

        # T·∫°m d·ª´ng timer ƒë·ªçc frame ƒë·ªÉ l·∫•y ·∫£nh ·ªïn ƒë·ªãnh (n·∫øu ƒëang ch·∫°y)
        was_timer_active = self.frame_timer.isActive()
        if was_timer_active: self.frame_timer.stop(); time.sleep(0.1) # Ch·ªù ch√∫t x√≠u

        # ƒê·ªçc frame hi·ªán t·∫°i t·ª´ webcam
        ret, frame = self.cap.read()

        # Kh·ªüi ƒë·ªông l·∫°i timer ngay sau khi ƒë·ªçc frame (n·∫øu n√≥ ƒëang ch·∫°y tr∆∞·ªõc ƒë√≥)
        if was_timer_active and self.cap and self.cap.isOpened():
            self.frame_timer.start()

        # Ki·ªÉm tra frame ƒë·ªçc ƒë∆∞·ª£c
        if not ret or frame is None or frame.size == 0:
            QMessageBox.warning(self,"L·ªói ƒê·ªçc Frame","Kh√¥ng th·ªÉ l·∫•y ·∫£nh t·ª´ webcam ƒë·ªÉ ch·ª•p.")
            return

        try:
            # Quy·∫øt ƒë·ªãnh l∆∞u frame g·ªëc hay frame ƒë√£ crop ROI?
            # Hi·ªán t·∫°i: L∆∞u frame ƒë√£ √°p d·ª•ng ROI (n·∫øu c√≥), t∆∞∆°ng t·ª± frame ƒëi v√†o x·ª≠ l√Ω
            frame_to_save = frame.copy()
            if self.webcam_roi:
                x, y, w, h = self.webcam_roi
                fh_orig, fw_orig = frame.shape[:2]
                x1, y1 = max(0, int(x)), max(0, int(y))
                x2, y2 = min(fw_orig, int(x + w)), min(fh_orig, int(y + h))
                if x2 > x1 and y2 > y1:
                     frame_to_save = frame[y1:y2, x1:x2].copy() # L∆∞u ph·∫ßn ROI
                # else: L∆∞u frame g·ªëc n·∫øu ROI kh√¥ng h·ª£p l·ªá

            # L∆∞u ·∫£nh v√†o d·ªØ li·ªáu v√† x√≥a ƒë∆∞·ªùng d·∫´n file c≈© trong config
            self.ref_data[img_type] = frame_to_save
            self.config['ref_paths'][img_type] = None # ƒê√°nh d·∫•u l√† ch·ª•p t·ª´ webcam
            self.log_activity(f"üì∏ ƒê√£ ch·ª•p ·∫£nh '{img_type}' (SSIM) t·ª´ webcam" + (" (ƒê√£ √°p d·ª•ng ROI)" if self.webcam_roi else ""))
            self.update_button_styles() # C·∫≠p nh·∫≠t giao di·ªán n√∫t
            # self.save_config() # L∆∞u config n·∫øu mu·ªën

        except Exception as e:
            # X·ª≠ l√Ω l·ªói khi x·ª≠ l√Ω ho·∫∑c l∆∞u ·∫£nh ch·ª•p
            self.log_activity(f"‚ùå L·ªói khi l∆∞u ·∫£nh ch·ª•p '{img_type}': {e}")
            QMessageBox.critical(self,"L·ªói Ch·ª•p ·∫¢nh",f"ƒê√£ x·∫£y ra l·ªói khi ch·ª•p v√† l∆∞u ·∫£nh: {e}")


    # --- ROI and Error Folder ---
    def select_webcam_roi(self):
        """M·ªü c·ª≠a s·ªï cho ph√©p ng∆∞·ªùi d√πng ch·ªçn v√πng quan t√¢m (ROI) tr√™n ·∫£nh webcam."""
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if not self.cap or not self.cap.isOpened():
            QMessageBox.warning(self, "Webcam Ch∆∞a B·∫≠t", "Vui l√≤ng b·∫≠t webcam tr∆∞·ªõc khi ch·ªçn ROI.")
            return
        if self.processing:
            QMessageBox.warning(self, "ƒêang X·ª≠ L√Ω", "Kh√¥ng th·ªÉ ch·ªçn ROI khi ƒëang x·ª≠ l√Ω.")
            return

        # T·∫°m d·ª´ng timer webcam ƒë·ªÉ ·∫£nh tƒ©nh khi ch·ªçn ROI
        was_timer_active = self.frame_timer.isActive()
        if was_timer_active: self.frame_timer.stop(); time.sleep(0.1)

        # ƒê·ªçc m·ªôt frame hi·ªán t·∫°i
        ret, frame = self.cap.read()

        # N·∫øu ƒë·ªçc l·ªói, b·∫≠t l·∫°i timer (n·∫øu c·∫ßn) v√† tho√°t
        if not ret or frame is None or frame.size == 0:
            if was_timer_active and self.cap and self.cap.isOpened(): self.frame_timer.start()
            QMessageBox.warning(self, "L·ªói ƒê·ªçc Frame", "Kh√¥ng th·ªÉ l·∫•y ·∫£nh t·ª´ webcam ƒë·ªÉ ch·ªçn ROI.")
            return

        try:
            # ƒê·∫∑t t√™n c·ª≠a s·ªï v√† t·∫°o c·ª≠a s·ªï c√≥ th·ªÉ thay ƒë·ªïi k√≠ch th∆∞·ªõc
            window_name = "Chon ROI (Keo chuot -> Enter/Space | Huy -> C/ESC | Reset -> R)"
            cv2.namedWindow(window_name, cv2.WINDOW_NORMAL) # Cho ph√©p resize
            cv2.resizeWindow(window_name, 800, 600) # K√≠ch th∆∞·ªõc ban ƒë·∫ßu h·ª£p l√Ω
            cv2.setWindowTitle(window_name, window_name) # ƒê·∫∑t title bar (tr√™n Windows)

            # Clone ·∫£nh ƒë·ªÉ v·∫Ω h∆∞·ªõng d·∫´n (t√πy ch·ªçn)
            frame_roi_select = frame.copy()
            # (C√≥ th·ªÉ th√™m cv2.putText ƒë·ªÉ h∆∞·ªõng d·∫´n r√µ h∆°n tr√™n ·∫£nh)

            # --- S·ª≠ d·ª•ng cv2.selectROI ---
            # showCrosshair=True: Hi·ªÉn th·ªã d·∫•u + ·ªü t√¢m
            # fromCenter=False: V·∫Ω t·ª´ g√≥c tr√™n tr√°i (ph·ªï bi·∫øn h∆°n)
            roi_tuple = cv2.selectROI(window_name, frame_roi_select, showCrosshair=True, fromCenter=False)
            # --- selectROI tr·∫£ v·ªÅ (x, y, w, h) ho·∫∑c (0,0,0,0) n·∫øu h·ªßy ---
            cv2.destroyWindow(window_name) # ƒê√≥ng c·ª≠a s·ªï ch·ªçn ROI ngay sau khi ho√†n t·∫•t

            # B·∫≠t l·∫°i timer webcam NGAY SAU KHI c·ª≠a s·ªï ROI ƒë√≥ng
            if was_timer_active and self.cap and self.cap.isOpened():
                self.frame_timer.start()

            # X·ª≠ l√Ω k·∫øt qu·∫£ ROI
            if roi_tuple == (0, 0, 0, 0): # Ng∆∞·ªùi d√πng h·ªßy (ESC, C, ƒë√≥ng c·ª≠a s·ªï)
                self.log_activity("‚ÑπÔ∏è ƒê√£ h·ªßy ch·ªçn ROI.")
                # Kh√¥ng thay ƒë·ªïi ROI hi·ªán c√≥
            elif roi_tuple[2] > 0 and roi_tuple[3] > 0: # ROI h·ª£p l·ªá (c√≥ chi·ªÅu r·ªông v√† cao)
                # L∆∞u ROI m·ªõi d∆∞·ªõi d·∫°ng tuple s·ªë nguy√™n kh√¥ng √¢m
                self.webcam_roi = tuple(max(0, int(v)) for v in roi_tuple)
                self.config['webcam_roi'] = list(self.webcam_roi) # C·∫≠p nh·∫≠t config
                self.log_activity(f"‚úÖ ƒê√£ ch·ªçn ROI m·ªõi: {self.webcam_roi}")
                # self.save_config() # L∆∞u config
            else:
                 # Ng∆∞·ªùi d√πng ch·ªçn nh∆∞ng w=0 ho·∫∑c h=0 (nh·∫•p chu·ªôt kh√¥ng k√©o?) -> Coi nh∆∞ reset
                 self.log_activity("‚ö†Ô∏è ƒê√£ reset ROI (ch·ªçn v√πng kh√¥ng h·ª£p l·ªá).")
                 self.webcam_roi = None # X√≥a ROI
                 self.config['webcam_roi'] = None
                 # self.save_config()

            # C·∫≠p nh·∫≠t giao di·ªán n√∫t ROI
            self.update_button_styles()

        except Exception as e:
            # B·∫Øt l·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh ch·ªçn ROI
            self.log_activity(f"‚ùå L·ªói trong qu√° tr√¨nh ch·ªçn ROI: {e}")
            self.log_activity(traceback.format_exc())
            QMessageBox.critical(self, "L·ªói Ch·ªçn ROI", f"ƒê√£ x·∫£y ra l·ªói khi ch·ªçn ROI:\n{e}")
            cv2.destroyAllWindows() # ƒê·∫£m b·∫£o ƒë√≥ng m·ªçi c·ª≠a s·ªï OpenCV n·∫øu c√≥ l·ªói
            # B·∫≠t l·∫°i timer n·∫øu c·∫ßn v√† ch∆∞a ƒë∆∞·ª£c b·∫≠t l·∫°i do l·ªói
            if was_timer_active and self.cap and self.cap.isOpened() and not self.frame_timer.isActive():
                try: self.frame_timer.start()
                except Exception: pass


    def select_error_folder(self):
        """M·ªü dialog cho ph√©p ng∆∞·ªùi d√πng ch·ªçn th∆∞ m·ª•c l∆∞u l·ªói, video v√† log."""
        if self.processing:
            QMessageBox.warning(self, "ƒêang X·ª≠ L√Ω", "Kh√¥ng th·ªÉ thay ƒë·ªïi th∆∞ m·ª•c khi ƒëang x·ª≠ l√Ω.")
            return

        opts = QFileDialog.Options() | QFileDialog.ShowDirsOnly
        # Th∆∞ m·ª•c g·ª£i √Ω: th∆∞ m·ª•c c≈© -> th∆∞ m·ª•c ng∆∞·ªùi d√πng
        suggested_dir = self.error_folder or os.path.expanduser("~")

        # M·ªü dialog ch·ªçn th∆∞ m·ª•c
        folder = QFileDialog.getExistingDirectory(
            self, "Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh l·ªói, video v√† log", suggested_dir, opts)

        if folder: # N·∫øu ng∆∞·ªùi d√πng ch·ªçn th∆∞ m·ª•c
            try:
                # Ki·ªÉm tra quy·ªÅn ghi v√†o th∆∞ m·ª•c ƒë√£ ch·ªçn
                if not os.access(folder, os.W_OK):
                    raise PermissionError(f"Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c '{folder}'.")

                # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu th∆∞ m·ª•c th·ª±c s·ª± thay ƒë·ªïi
                if self.error_folder != folder:
                    self.error_folder = folder
                    self.config['error_folder'] = folder
                    self.log_activity(f"üìÅ ƒê√£ ch·ªçn th∆∞ m·ª•c l·ªói: {self.error_folder}")
                    # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n file log d·ª±a tr√™n th∆∞ m·ª•c m·ªõi
                    old_log_path = self.log_file_path
                    self.log_file_path = os.path.join(self.error_folder, LOG_FILE_NAME)
                    # Ghi log v·ªÅ s·ª± thay ƒë·ªïi (v√†o file log c≈© n·∫øu c√≥)
                    if old_log_path and old_log_path != self.log_file_path:
                         # Ghi t·∫°m v√†o log c≈© v·ªÅ vi·ªác ƒë·ªïi ƒë∆∞·ªùng d·∫´n
                         try:
                            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
                            with open(old_log_path,"a",encoding="utf-8") as lf_old:
                                lf_old.write(f"{timestamp} - INFO - ƒê∆∞·ªùng d·∫´n log ƒë·ªïi th√†nh: {self.log_file_path}\n")
                         except Exception: pass # B·ªè qua n·∫øu kh√¥ng ghi ƒë∆∞·ª£c v√†o file c≈©

                    self.log_activity(f"üìÑ File log s·∫Ω ghi t·∫°i: {self.log_file_path}")
                    # Th·ª≠ ghi m·ªôt d√≤ng v√†o log m·ªõi ƒë·ªÉ x√°c nh·∫≠n
                    self.log_activity("üìù (Th·ª≠ ghi log v√†o ƒë∆∞·ªùng d·∫´n m·ªõi)")
                    # self.save_config() # L∆∞u config
                    self.update_button_styles() # C·∫≠p nh·∫≠t style n√∫t

            except PermissionError as pe:
                QMessageBox.warning(self, "L·ªói Quy·ªÅn Ghi", f"{pe}\n\nVui l√≤ng ch·ªçn th∆∞ m·ª•c kh√°c ho·∫∑c ki·ªÉm tra quy·ªÅn truy c·∫≠p.")
                self.log_activity(f"‚ö†Ô∏è {pe}")
            except Exception as e:
                QMessageBox.critical(self, "L·ªói Th∆∞ M·ª•c", f"ƒê√£ x·∫£y ra l·ªói khi ƒë·∫∑t th∆∞ m·ª•c l·ªói:\n{e}")
                self.log_activity(f"‚ùå L·ªói khi ƒë·∫∑t th∆∞ m·ª•c l·ªói '{folder}': {e}")


    # --- Serial Port Handling ---
    @QtCore.pyqtSlot()
    def _refresh_com_ports(self):
        """Qu√©t l·∫°i c√°c c·ªïng COM c√≥ s·∫µn v√† c·∫≠p nh·∫≠t ComboBox."""
        # Kh√¥ng cho refresh n·∫øu ƒëang k·∫øt n·ªëi COM ho·∫∑c ƒëang x·ª≠ l√Ω
        if self.serial_enabled:
            self.log_activity("‚ÑπÔ∏è Ng·∫Øt k·∫øt n·ªëi COM tr∆∞·ªõc khi l√†m m·ªõi danh s√°ch.")
            return
        if self.processing:
            self.log_activity("‚ÑπÔ∏è Kh√¥ng th·ªÉ l√†m m·ªõi c·ªïng COM khi ƒëang x·ª≠ l√Ω.")
            return

        self.comPortComboBox.blockSignals(True)
        current_selection = self.comPortComboBox.currentText() # L∆∞u l·∫°i l·ª±a ch·ªçn hi·ªán t·∫°i
        self.comPortComboBox.clear() # X√≥a list c≈©
        port_names = []
        try:
            # Li·ªát k√™ c√°c c·ªïng COM
            ports = serial.tools.list_ports.comports()
            # L·ªçc v√† s·∫Øp x·∫øp t√™n thi·∫øt b·ªã (v√≠ d·ª•: COM1, COM3)
            port_names = sorted([port.device for port in ports])
            if port_names: self.log_activity(f"üîÑ T√¨m th·∫•y c·ªïng COM: {', '.join(port_names)}")
            else: self.log_activity("üîÑ Kh√¥ng t√¨m th·∫•y c·ªïng COM n√†o.")
        except Exception as e:
            self.log_activity(f"‚ùå L·ªói khi li·ªát k√™ c·ªïng COM: {e}")

        # ƒêi·ªÅn v√†o ComboBox
        if not port_names:
             self.comPortComboBox.addItem("Kh√¥ng t√¨m th·∫•y c·ªïng")
             self.comPortComboBox.setEnabled(False) # V√¥ hi·ªáu h√≥a ch·ªçn
             # N·∫øu tr∆∞·ªõc ƒë√≥ c√≥ ch·ªçn c·ªïng, gi·ªù kh√¥ng c√≤n -> c·∫≠p nh·∫≠t state
             if self.serial_port_name is not None:
                  self.serial_port_name = None
                  self.config['serial_port'] = None
                  # self.save_config()
        else:
            self.comPortComboBox.addItems(port_names)
            self.comPortComboBox.setEnabled(True) # Cho ph√©p ch·ªçn
            # C·ªë g·∫Øng kh√¥i ph·ª•c l·ª±a ch·ªçn c≈© n·∫øu n√≥ c√≤n trong danh s√°ch m·ªõi
            if current_selection in port_names:
                 self.comPortComboBox.setCurrentText(current_selection)
                 # ƒê·∫£m b·∫£o self.serial_port_name kh·ªõp v·ªõi l·ª±a ch·ªçn n√†y
                 if self.serial_port_name != current_selection:
                     self.serial_port_name = current_selection
                     self.config['serial_port'] = self.serial_port_name
            else:
                # N·∫øu c·ªïng c≈© kh√¥ng c√≤n, t·ª± ƒë·ªông ch·ªçn c·ªïng ƒë·∫ßu ti√™n
                 new_selection = self.comPortComboBox.itemText(0)
                 self.comPortComboBox.setCurrentIndex(0)
                 # C·∫≠p nh·∫≠t state v√† log n·∫øu l·ª±a ch·ªçn thay ƒë·ªïi
                 if self.serial_port_name != new_selection:
                    if self.serial_port_name and "Kh√¥ng t√¨m th·∫•y" not in self.serial_port_name :
                         self.log_activity(f"‚ö†Ô∏è COM '{self.serial_port_name}' kh√¥ng c√≤n. Ch·ªçn m·∫∑c ƒë·ªãnh '{new_selection}'.")
                    self.serial_port_name = new_selection
                    self.config['serial_port'] = self.serial_port_name
                    # self.save_config()

        # B·ªè ch·∫∑n t√≠n hi·ªáu v√† c·∫≠p nh·∫≠t c√°c control li√™n quan
        self.comPortComboBox.blockSignals(False)
        self._update_controls_state() # C·∫≠p nh·∫≠t tr·∫°ng th√°i enabled c·ªßa c√°c n√∫t/combo

    @QtCore.pyqtSlot()
    def _toggle_serial_port(self):
        """K·∫øt n·ªëi ho·∫∑c ng·∫Øt k·∫øt n·ªëi c·ªïng Serial ƒë√£ ch·ªçn."""
        if self.processing:
            QMessageBox.warning(self, "ƒêang X·ª≠ L√Ω", "Kh√¥ng th·ªÉ thay ƒë·ªïi k·∫øt n·ªëi COM khi ƒëang x·ª≠ l√Ω.")
            return

        if not self.serial_enabled: # --- Logic K·∫æT N·ªêI ---
            # L·∫•y th√¥ng tin c·ªïng v√† baud rate t·ª´ UI/state
            port_to_connect = self.comPortComboBox.currentText() # L·∫•y t·ª´ UI ƒë·ªÉ ƒë·∫£m b·∫£o kh·ªõp
            baud_rate_to_use = self.serial_baud_rate

            # Ki·ªÉm tra xem c·ªïng c√≥ h·ª£p l·ªá kh√¥ng
            if not port_to_connect or "Kh√¥ng t√¨m th·∫•y" in port_to_connect:
                QMessageBox.warning(self, "Ch∆∞a Ch·ªçn C·ªïng", "Vui l√≤ng ch·ªçn c·ªïng COM h·ª£p l·ªá t·ª´ danh s√°ch.")
                return

            # ƒê√≥ng c·ªïng c≈© (n·∫øu v√¥ t√¨nh c√≤n m·ªü) tr∆∞·ªõc khi m·ªü c·ªïng m·ªõi
            if self.serial_port and self.serial_port.is_open:
                try: self.serial_port.close()
                except Exception: pass
            self.serial_port = None # Reset

            try:
                self.log_activity(f"üîå ƒêang k·∫øt n·ªëi {port_to_connect} @ {baud_rate_to_use} baud...")
                # ƒê·∫∑t timeout khi ƒë·ªçc v√† ghi ƒë·ªÉ tr√°nh treo n·∫øu thi·∫øt b·ªã kh√¥ng ph·∫£n h·ªìi
                self.serial_port = serial.Serial(port_to_connect, baud_rate_to_use,
                                                  timeout=0.1,       # Timeout ƒë·ªçc (s)
                                                  write_timeout=1.0) # Timeout ghi (s)

                # ---- K·∫øt n·ªëi th√†nh c√¥ng ----
                self.serial_enabled = True
                self.serial_port_name = port_to_connect # C·∫≠p nh·∫≠t state kh·ªõp v·ªõi c·ªïng ƒë√£ k·∫øt n·ªëi
                self.serial_baud_rate = baud_rate_to_use # C·∫≠p nh·∫≠t state baudrate
                # C·∫≠p nh·∫≠t config (ch·ªâ port v√† baud, enabled lu√¥n l√† False khi l∆∞u)
                self.config['serial_port'] = port_to_connect
                self.config['serial_baud'] = baud_rate_to_use
                self.log_activity(f"‚úÖ ƒê√£ k·∫øt n·ªëi COM: {port_to_connect}")

            except serial.SerialException as e:
                # L·ªói khi m·ªü c·ªïng (vd: b·ªã d√πng b·ªüi ch∆∞∆°ng tr√¨nh kh√°c, kh√¥ng t·ªìn t·∫°i)
                self.log_activity(f"‚ùå L·ªói m·ªü c·ªïng COM '{port_to_connect}': {e}")
                QMessageBox.critical(self, "L·ªói K·∫øt N·ªëi COM", f"Kh√¥ng th·ªÉ m·ªü c·ªïng {port_to_connect}.\nL·ªói: {e}\n\nKi·ªÉm tra driver, k·∫øt n·ªëi ho·∫∑c c·ªïng c√≥ ƒëang b·ªã s·ª≠ d·ª•ng kh√¥ng?")
                self.serial_port = None; self.serial_enabled = False
            except Exception as e_unk:
                # L·ªói kh√¥ng x√°c ƒë·ªãnh kh√°c
                self.log_activity(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi m·ªü COM '{port_to_connect}': {e_unk}")
                self.log_activity(traceback.format_exc())
                QMessageBox.critical(self, "L·ªói Nghi√™m Tr·ªçng", f"L·ªói kh√¥ng mong mu·ªën khi k·∫øt n·ªëi COM.\nL·ªói: {e_unk}")
                self.serial_port = None; self.serial_enabled = False

        else: # --- Logic NG·∫ÆT K·∫æT N·ªêI ---
            port_to_close = self.serial_port_name or "N/A" # L·∫•y t√™n c·ªïng ƒëang k·∫øt n·ªëi
            try:
                if self.serial_port and self.serial_port.is_open:
                    self.log_activity(f"üîå ƒêang ng·∫Øt k·∫øt n·ªëi COM: {port_to_close}...")
                    self.serial_port.close()
                    self.log_activity(f"üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi COM.")
            except serial.SerialException as e:
                 self.log_activity(f"‚ö†Ô∏è L·ªói khi ƒë√≥ng c·ªïng COM '{port_to_close}': {e}")
            except Exception as e_unk:
                 self.log_activity(f"‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë√≥ng COM '{port_to_close}': {e_unk}")
            finally:
                 # Lu√¥n d·ªçn d·∫πp tr·∫°ng th√°i sau khi c·ªë g·∫Øng ƒë√≥ng
                 self.serial_port = None
                 self.serial_enabled = False
                 # self.config['serial_enabled'] ƒë√£ l√† False

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i enable/disable c·ªßa c√°c control v√† style n√∫t
        self._update_controls_state()
        self.update_serial_button_style() # C·∫≠p nh·∫≠t ri√™ng style n√∫t Connect/Disconnect
        # self.save_config() # L∆∞u tr·∫°ng th√°i m·ªõi (port, baud)


    @QtCore.pyqtSlot(str)
    def _send_serial_command(self, command):
        """G·ª≠i l·ªánh (chu·ªói string) qua c·ªïng serial ƒë√£ m·ªü (ƒë∆∞·ª£c g·ªçi t·ª´ worker)."""
        if not self.serial_enabled or not self.serial_port or not self.serial_port.is_open:
            # self.log_activity(f"‚ö†Ô∏è B·ªè qua g·ª≠i COM (ch∆∞a k·∫øt n·ªëi): {command}") # Log n·∫øu c·∫ßn debug
            return

        try:
            # ƒê·∫£m b·∫£o l·ªánh k·∫øt th√∫c b·∫±ng k√Ω t·ª± xu·ªëng d√≤ng (th∆∞·ªùng c·∫ßn thi·∫øt cho Arduino/ESP)
            cmd_with_newline = command if command.endswith('\n') else command + '\n'
            # Chuy·ªÉn chu·ªói th√†nh bytes (th∆∞·ªùng d√πng utf-8)
            byte_command = cmd_with_newline.encode('utf-8')
            # Ghi d·ªØ li·ªáu ra c·ªïng serial
            bytes_written = self.serial_port.write(byte_command)

            # Ki·ªÉm tra xem t·∫•t c·∫£ bytes ƒë√£ ƒë∆∞·ª£c ghi ch∆∞a (th∆∞·ªùng kh√¥ng c·∫ßn n·∫øu c√≥ write_timeout)
            if bytes_written != len(byte_command):
                 self.log_activity(f"‚ö†Ô∏è G·ª≠i COM kh√¥ng ƒë·ªß byte: {command} ({bytes_written}/{len(byte_command)} bytes)")
            # else:
            #      self.log_activity(f"‚û°Ô∏è G·ª≠i COM [{self.serial_port_name}]: {command}") # Log th√†nh c√¥ng (c√≥ th·ªÉ g√¢y nhi·ªÅu log)

        except serial.SerialTimeoutException:
            # L·ªói timeout khi ghi (thi·∫øt b·ªã kh√¥ng nh·∫≠n k·ªãp?)
            self.log_activity(f"‚ö†Ô∏è Timeout khi g·ª≠i l·ªánh COM t·ªõi '{self.serial_port_name}': {command}")
            # C√¢n nh·∫Øc t·ª± ƒë·ªông ng·∫Øt k·∫øt n·ªëi n·∫øu l·ªói n√†y x·∫£y ra li√™n t·ª•c?
        except serial.SerialException as e:
            # L·ªói serial kh√°c trong qu√° tr√¨nh ghi
            self.log_activity(f"‚ùå L·ªói nghi√™m tr·ªçng khi g·ª≠i l·ªánh COM: {e}. T·ª± ƒë·ªông ng·∫Øt k·∫øt n·ªëi.")
            QMessageBox.critical(self, "L·ªói G·ª≠i COM", f"Kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu t·ªõi {self.serial_port_name}.\nK·∫øt n·ªëi s·∫Ω b·ªã ƒë√≥ng.\nL·ªói: {e}")
            # G·ªçi h√†m ng·∫Øt k·∫øt n·ªëi m·ªôt c√°ch an to√†n t·ª´ lu·ªìng ch√≠nh
            # Kh√¥ng g·ªçi tr·ª±c ti·∫øp _toggle_serial_port t·ª´ slot n√†y n·∫øu n√≥ ƒëang ·ªü lu·ªìng worker
            # Thay v√†o ƒë√≥, n√™n c√≥ m·ªôt t√≠n hi·ªáu/c∆° ch·∫ø ƒë·ªÉ y√™u c·∫ßu lu·ªìng ch√≠nh ng·∫Øt k·∫øt n·ªëi
            # Ho·∫∑c ƒë∆°n gi·∫£n l√† ghi nh·∫≠n l·ªói v√† ƒë·ª£i ng∆∞·ªùi d√πng x·ª≠ l√Ω.
            # Hi·ªán t·∫°i: Log l·ªói v√† kh√¥ng t·ª± ng·∫Øt k·∫øt n·ªëi t·ª´ ƒë√¢y. Worker c√≥ th·ªÉ ng·ª´ng g·ª≠i l·ªánh.
            self.serial_enabled = False # C·∫≠p nh·∫≠t tr·∫°ng th√°i ngay l·∫≠p t·ª©c ƒë·ªÉ worker kh√¥ng g·ª≠i n·ªØa
            if self.serial_port:
                try: self.serial_port.close()
                except Exception: pass
                self.serial_port = None
            # C·∫≠p nh·∫≠t UI t·ª´ lu·ªìng ch√≠nh
            QtCore.QMetaObject.invokeMethod(self, "_update_controls_state", QtCore.Qt.QueuedConnection)
            QtCore.QMetaObject.invokeMethod(self, "update_serial_button_style", QtCore.Qt.QueuedConnection)

        except Exception as e_unk:
             # L·ªói kh√¥ng x√°c ƒë·ªãnh kh√°c
             self.log_activity(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i l·ªánh COM: {e_unk}. Ng·∫Øt k·∫øt n·ªëi.")
             self.log_activity(traceback.format_exc())
             QMessageBox.critical(self, "L·ªói G·ª≠i COM", f"L·ªói kh√¥ng mong mu·ªën khi g·ª≠i d·ªØ li·ªáu.\nK·∫øt n·ªëi s·∫Ω b·ªã ƒë√≥ng.\nL·ªói: {e_unk}")
             # T∆∞∆°ng t·ª± nh∆∞ tr√™n, c·∫ßn x·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi c·∫©n th·∫≠n
             self.serial_enabled = False
             if self.serial_port:
                 try: self.serial_port.close()
                 except Exception: pass
                 self.serial_port = None
             QtCore.QMetaObject.invokeMethod(self, "_update_controls_state", QtCore.Qt.QueuedConnection)
             QtCore.QMetaObject.invokeMethod(self, "update_serial_button_style", QtCore.Qt.QueuedConnection)


    # --- YOLOv8 Model Handling ---
    @QtCore.pyqtSlot()
    def _select_yolo_model_path(self):
        """M·ªü dialog cho ph√©p ng∆∞·ªùi d√πng ch·ªçn file model YOLOv8 (.pt)."""
        if self.processing:
             QMessageBox.warning(self, "ƒêang X·ª≠ L√Ω", "Kh√¥ng th·ªÉ thay ƒë·ªïi model khi ƒëang x·ª≠ l√Ω.")
             return
        # Ch·ªâ cho ph√©p ch·ªçn n·∫øu YOLO kh·∫£ d·ª•ng
        if not YOLO_AVAILABLE:
            QMessageBox.warning(self, "Thi·∫øu Th∆∞ Vi·ªán", "Ch·ª©c nƒÉng YOLO kh√¥ng kh·∫£ d·ª•ng do thi·∫øu th∆∞ vi·ªán 'ultralytics'.")
            return

        opts = QFileDialog.Options()
        # Th∆∞ m·ª•c g·ª£i √Ω: th∆∞ m·ª•c model c≈© -> th∆∞ m·ª•c ng∆∞·ªùi d√πng
        current_path = self.config.get('yolo_model_path')
        suggested_dir = os.path.dirname(current_path) if current_path and os.path.isdir(os.path.dirname(current_path)) else os.path.expanduser("~")

        # M·ªü dialog ch·ªçn file
        fp, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn Model YOLOv8 (.pt)", suggested_dir,
                                            "PyTorch Models (*.pt);;All Files (*)", options=opts)
        if fp: # N·∫øu ng∆∞·ªùi d√πng ch·ªçn file
            # Ch·ªâ x·ª≠ l√Ω n·∫øu ƒë∆∞·ªùng d·∫´n th·ª±c s·ª± thay ƒë·ªïi
            if self.config.get('yolo_model_path') != fp:
                self.config['yolo_model_path'] = fp
                self.log_activity(f"üìÅ Ch·ªçn model YOLO m·ªõi: {os.path.basename(fp)}")

                # C·∫≠p nh·∫≠t label hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n model
                if hasattr(self, 'yoloModelPathLabel'):
                    base_name = os.path.basename(fp)
                    self.yoloModelPathLabel.setText(base_name)
                    self.yoloModelPathLabel.setStyleSheet("font-style: normal; color: black;")
                    self.yoloModelPathLabel.setToolTip(fp)

                # Gi·∫£i ph√≥ng model c≈© n·∫øu c√≥
                if self.yolo_model is not None:
                    self.log_activity("üß† Gi·∫£i ph√≥ng model YOLO c≈©...")
                    try: del self.yolo_model; self.yolo_model = None
                    except Exception: pass
                    # Optional: GPU memory cleanup if using PyTorch/CUDA explicitly
                    # try: import torch; torch.cuda.empty_cache(); except: pass

                # Th·ª≠ t·∫£i model m·ªõi ngay l·∫≠p t·ª©c (c√≥ th·ªÉ delay n·∫øu c·∫ßn)
                self._load_yolo_model() # H√†m n√†y s·∫Ω log k·∫øt qu·∫£ v√† x·ª≠ l√Ω l·ªói
                # self.save_config() # L∆∞u config

    def _load_yolo_model(self):
        """T·∫£i model YOLO t·ª´ ƒë∆∞·ªùng d·∫´n trong config. Ch·∫°y tr√™n lu·ªìng ch√≠nh."""
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
        if not YOLO_AVAILABLE:
            # ƒê√£ c√≥ c·∫£nh b√°o ·ªü init, kh√¥ng c·∫ßn log l·∫°i
            if hasattr(self,'details_label'): self.details_label.setText("Details: YOLO kh√¥ng kh·∫£ d·ª•ng (thi·∫øu ultralytics)")
            return False
        if not self.yolo_model is None and self.current_comparison_method != METHOD_YOLO:
             self.log_activity("‚ÑπÔ∏è Kh√¥ng ph·∫£i ch·∫ø ƒë·ªô YOLO, b·ªè qua t·∫£i model.")
             return False # Kh√¥ng c·∫ßn t·∫£i n·∫øu kh√¥ng d√πng

        model_path = self.config.get('yolo_model_path')
        if not model_path or not isinstance(model_path, str) or not os.path.isfile(model_path):
            msg = "Ch∆∞a c·∫•u h√¨nh ho·∫∑c ƒë∆∞·ªùng d·∫´n model YOLO kh√¥ng h·ª£p l·ªá."
            if model_path: msg = f"ƒê∆∞·ªùng d·∫´n model YOLO kh√¥ng h·ª£p l·ªá: {model_path}"
            self.log_activity(f"‚ö†Ô∏è {msg}")
            if hasattr(self,'details_label'): self.details_label.setText(f"Details: {msg}")
            if hasattr(self, 'yoloModelPathLabel'):
                self.yoloModelPathLabel.setText("Model kh√¥ng h·ª£p l·ªá!")
                self.yoloModelPathLabel.setStyleSheet("font-style: italic; color: red;")
            self.yolo_model = None # ƒê·∫£m b·∫£o model l√† None
            return False

        # --- B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i model ---
        # Ki·ªÉm tra xem model c√≥ c·∫ßn t·∫£i l·∫°i kh√¥ng (ƒë√£ t·∫£i v√† c√πng ƒë∆∞·ªùng d·∫´n?)
        if self.yolo_model is not None:
             try:
                 # Th·ª≠ truy c·∫≠p thu·ªôc t√≠nh l∆∞u ƒë∆∞·ªùng d·∫´n (c√≥ th·ªÉ thay ƒë·ªïi t√πy phi√™n b·∫£n ultralytics)
                 current_model_path_attr = getattr(self.yolo_model, 'ckpt_path', None) or \
                                           getattr(self.yolo_model, 'model', {}).get('yaml',{}).get('yaml_file',None) or \
                                           getattr(self.yolo_model,'cfg', None) # C√°c c√°ch l·∫•y path c≈©/m·ªõi
                 if current_model_path_attr and os.path.normpath(current_model_path_attr) == os.path.normpath(model_path):
                     self.log_activity("‚ÑπÔ∏è Model YOLO ƒë√£ ƒë∆∞·ª£c t·∫£i (kh√¥ng ƒë·ªïi).")
                     if hasattr(self,'details_label'): self.details_label.setText("Details: Model YOLO ƒë√£ t·∫£i.")
                     return True # Model ƒë√∫ng ƒë√£ ƒë∆∞·ª£c t·∫£i
             except Exception as e_check:
                self.log_activity(f"‚ÑπÔ∏è Kh√¥ng th·ªÉ ki·ªÉm tra path model c≈©, s·∫Ω t·∫£i l·∫°i. L·ªói: {e_check}")

            # N·∫øu c√≥ model c≈© kh√°c -> gi·∫£i ph√≥ng tr∆∞·ªõc khi t·∫£i m·ªõi

                self.log_activity("üß† Gi·∫£i ph√≥ng model YOLO c≈©...")
                try: del self.yolo_model; self.yolo_model = None
                except Exception: pass
            # try: import torch; torch.cuda.empty_cache(); except: pass

        # B·∫Øt ƒë·∫ßu t·∫£i model m·ªõi
        model_basename = os.path.basename(model_path)
        self.log_activity(f"‚è≥ ƒêang t·∫£i model YOLO: {model_basename}...")
        # C·∫≠p nh·∫≠t UI ƒë·ªÉ b√°o ƒëang t·∫£i
        if hasattr(self,'details_label'): self.details_label.setText("Details: ƒêang t·∫£i model YOLO...")
        QtWidgets.QApplication.processEvents() # Bu·ªôc UI c·∫≠p nh·∫≠t ngay (c√≥ th·ªÉ l√†m UI h∆°i lag)

        try:
            # === T·∫¢I MODEL (c√≥ th·ªÉ m·∫•t th·ªùi gian) ===
            start_time = time.time()
            # device='cpu' c√≥ th·ªÉ gi√∫p tr√°nh l·ªói CUDA n·∫øu c√≥ v·∫•n ƒë·ªÅ v·ªõi GPU setup
            # Ho·∫∑c ƒë·ªÉ tr·ªëng ('') ƒë·ªÉ t·ª± ƒë·ªông ch·ªçn (GPU n·∫øu c√≥, CPU n·∫øu kh√¥ng)
            self.yolo_model = YOLO(model_path) # device='' ho·∫∑c device='cpu'
            load_time = time.time() - start_time
            # === T·∫¢I XONG ===

            # Log thi·∫øt b·ªã m√† model ƒëang ch·∫°y tr√™n ƒë√≥ (CPU ho·∫∑c GPU)
            device_used = "CPU" # M·∫∑c ƒë·ªãnh
            try: device_used = str(next(self.yolo_model.parameters()).device).upper()
            except: pass
            self.log_activity(f"‚úÖ Model YOLO '{model_basename}' ƒë√£ t·∫£i th√†nh c√¥ng sau {load_time:.2f}s (Device: {device_used}).")
            if hasattr(self,'details_label'): self.details_label.setText(f"Details: Model YOLO ƒë√£ t·∫£i ({device_used})")

            # Optional: Warm-up model b·∫±ng ·∫£nh gi·∫£ ƒë·ªÉ gi·∫£m ƒë·ªô tr·ªÖ ·ªü l·∫ßn predict ƒë·∫ßu ti√™n
            try:
                dummy_img = np.zeros((64, 64, 3), dtype=np.uint8)
                self.yolo_model.predict(dummy_img, verbose=False, imgsz=64)
                # self.log_activity("‚ÑπÔ∏è Model YOLO ƒë√£ ƒë∆∞·ª£c warm-up.")
            except Exception as wu_err:
                 self.log_activity(f"‚ö†Ô∏è L·ªói nh·ªè khi warm-up model YOLO: {wu_err}") # Kh√¥ng nghi√™m tr·ªçng
            return True  # Tr·∫£ v·ªÅ True khi th√†nh c√¥ng

        except Exception as e:
            # L·ªói nghi√™m tr·ªçng khi t·∫£i model
            load_error_msg = f"Kh√¥ng th·ªÉ t·∫£i model YOLO:\n{model_path}\n\nL·ªói: {e}"
            self.log_activity(f"‚ùå L·ªói nghi√™m tr·ªçng t·∫£i model YOLO: {e}")
            self.log_activity(traceback.format_exc()) # Ghi traceback chi ti·∫øt
            QMessageBox.critical(self, "L·ªói T·∫£i Model YOLO", load_error_msg)

            # ƒê·∫£m b·∫£o model l√† None n·∫øu l·ªói
            self.yolo_model = None
            # C·∫≠p nh·∫≠t UI b√°o l·ªói
            if hasattr(self,'details_label'): self.details_label.setText("Details: L·ªói t·∫£i model YOLO.")
            if hasattr(self, 'yoloModelPathLabel'):
                self.yoloModelPathLabel.setText("L·ªói t·∫£i model!")
                self.yoloModelPathLabel.setStyleSheet("font-style: italic; color: red;")
                self.yoloModelPathLabel.setToolTip(f"L·ªói: {e}")
            # C√≥ th·ªÉ c√¢n nh·∫Øc x√≥a ƒë∆∞·ªùng d·∫´n l·ªói kh·ªèi config?
            # self.config['yolo_model_path'] = None
            return False # Tr·∫£ v·ªÅ False khi th·∫•t b·∫°i


    # --- Processing Control ---
    def toggle_processing(self):
        """B·∫Øt ƒë·∫ßu ho·∫∑c d·ª´ng lu·ªìng x·ª≠ l√Ω h√¨nh ·∫£nh."""

        # --- KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN TR∆Ø·ªöC KHI B·∫ÆT ƒê·∫¶U ---
        if not self.processing:
            start_error = None # L∆∞u tr·ªØ th√¥ng b√°o l·ªói ƒë·∫ßu ti√™n g·∫∑p ph·∫£i

            # 1. Ki·ªÉm tra Webcam
            if not self.cap or not self.cap.isOpened():
                 start_error = "Vui l√≤ng b·∫≠t webcam tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu."
            # 2. Ki·ªÉm tra Th∆∞ m·ª•c l·ªói
            elif not self.error_folder or not os.path.isdir(self.error_folder) or not os.access(self.error_folder, os.W_OK):
                 # Th·ª≠ t·∫°o th∆∞ m·ª•c n·∫øu ch·ªâ kh√¥ng t·ªìn t·∫°i
                 if self.error_folder and not os.path.exists(self.error_folder):
                     try:
                         os.makedirs(self.error_folder, exist_ok=True)
                         self.log_activity(f"‚ÑπÔ∏è T·ª± ƒë·ªông t·∫°o th∆∞ m·ª•c l·ªói: {self.error_folder}")
                         # Ki·ªÉm tra l·∫°i quy·ªÅn ghi sau khi t·∫°o
                         if not os.access(self.error_folder, os.W_OK):
                              start_error = f"ƒê√£ t·∫°o th∆∞ m·ª•c '{self.error_folder}' nh∆∞ng kh√¥ng c√≥ quy·ªÅn ghi."
                     except Exception as e_mkdir:
                         start_error = f"Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c l·ªói '{self.error_folder}': {e_mkdir}"
                 elif self.error_folder and not os.access(self.error_folder, os.W_OK):
                      start_error = f"Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c l·ªói: {self.error_folder}"
                 else: # Ch∆∞a ch·ªçn th∆∞ m·ª•c
                      start_error = "Vui l√≤ng ch·ªçn th∆∞ m·ª•c h·ª£p l·ªá (c√≥ quy·ªÅn ghi) ƒë·ªÉ l∆∞u l·ªói/log/video."
            # 3. Ki·ªÉm tra theo ph∆∞∆°ng th·ª©c
            elif self.current_comparison_method == METHOD_SSIM:
                 # B·∫Øt bu·ªôc ph·∫£i c√≥ ·∫£nh Norm cho SSIM
                 if not isinstance(self.ref_data.get(REF_NORM), np.ndarray) or self.ref_data[REF_NORM].size == 0:
                    start_error = f"Vui l√≤ng t·∫£i ho·∫∑c ch·ª•p ·∫£nh '{REF_NORM}' (cho SSIM) tr∆∞·ªõc."
                 # C√≥ th·ªÉ th√™m c·∫£nh b√°o n·∫øu thi·∫øu ·∫£nh Shutdown/Fail nh∆∞ng v·∫´n cho ch·∫°y
            elif self.current_comparison_method == METHOD_YOLO:
                 # Ki·ªÉm tra model YOLO
                 if not YOLO_AVAILABLE:
                      start_error = "Th∆∞ vi·ªán YOLO (ultralytics) ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t."
                 elif not self.yolo_model: # Model ch∆∞a ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng
                      # Th·ª≠ t·∫£i l·∫°i model n·∫øu c√≥ ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá
                      if self.config.get('yolo_model_path') and os.path.isfile(self.config['yolo_model_path']):
                           self.log_activity("‚ÑπÔ∏è Model YOLO ch∆∞a t·∫£i, ƒëang th·ª≠ t·∫£i l·∫°i tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu...")
                           if not self._load_yolo_model(): # N·∫øu t·∫£i l·∫°i v·∫´n l·ªói
                                start_error = "Kh√¥ng th·ªÉ t·∫£i model YOLO. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n v√† file model."
                      else: # Kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n ho·∫∑c ƒë∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá
                           start_error = "Vui l√≤ng ch·ªçn ƒë∆∞·ªùng d·∫´n model YOLO h·ª£p l·ªá trong c·∫•u h√¨nh."
                 # Th√™m ki·ªÉm tra quy t·∫Øc YOLO n·∫øu c·∫ßn (v√≠ d·ª•: ƒë√£ ƒë·ªãnh nghƒ©a ch∆∞a?)
            else: # Ph∆∞∆°ng th·ª©c kh√¥ng x√°c ƒë·ªãnh
                 start_error = f"Ph∆∞∆°ng th·ª©c so s√°nh '{self.current_comparison_method}' kh√¥ng h·ª£p l·ªá."

            # N·∫øu c√≥ l·ªói khi ki·ªÉm tra ƒëi·ªÅu ki·ªán -> Hi·ªÉn th·ªã v√† kh√¥ng b·∫Øt ƒë·∫ßu
            if start_error:
                 QMessageBox.warning(self, "Ch∆∞a S·∫µn S√†ng", start_error)
                 self.log_activity(f"‚ö†Ô∏è Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω: {start_error}")
                 return # Kh√¥ng ti·∫øp t·ª•c

        # --- CHUY·ªÇN ƒê·ªîI TR·∫†NG TH√ÅI processing ---
        self.processing = not self.processing

        if self.processing:
            # --- LOGIC B·∫ÆT ƒê·∫¶U X·ª¨ L√ù ---
            self.log_activity(f"‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω (Ph∆∞∆°ng th·ª©c: {self.current_comparison_method})...")
            # L∆∞u c·∫•u h√¨nh hi·ªán t·∫°i tr∆∞·ªõc khi ch·∫°y (ƒë·∫£m b·∫£o config worker d√πng l√† m·ªõi nh·∫•t)
            self.save_config()

            # L·∫•y h√†m so s√°nh t∆∞∆°ng ·ª©ng v·ªõi ph∆∞∆°ng th·ª©c ƒë√£ ch·ªçn
            compare_func = self.comparison_functions.get(self.current_comparison_method)
            if not compare_func: # Kh√¥ng n√™n x·∫£y ra n·∫øu check ·ªü tr√™n ƒë√£ ƒë√∫ng
                self.log_activity(f"‚ùå L·ªói nghi√™m tr·ªçng: Kh√¥ng t√¨m th·∫•y h√†m x·ª≠ l√Ω cho '{self.current_comparison_method}'.")
                self.processing = False # H·ªßy b·∫Øt ƒë·∫ßu
                self.update_toggle_button_text()
                return

            # --- Chu·∫©n b·ªã v√† kh·ªüi ch·∫°y Worker Thread ---
            # D·ªçn d·∫πp worker c≈© (n·∫øu c√≥ v√† ƒëang ch·∫°y - tr∆∞·ªùng h·ª£p hi·∫øm)
            if self.processing_worker and self.processing_worker.isRunning():
                self.log_activity("‚öôÔ∏è ƒêang d·ª´ng worker c≈©...")
                self.processing_worker.stop()
                if not self.processing_worker.wait(1500): # Ch·ªù t·ªëi ƒëa 1.5s
                    self.log_activity("‚ö†Ô∏è Worker c≈© kh√¥ng d·ª´ng k·ªãp th·ªùi!")
                # Ng·∫Øt k·∫øt n·ªëi t√≠n hi·ªáu c≈© ƒë·ªÉ tr√°nh l·ªói (an to√†n h∆°n)
                try: self.processing_worker.log_signal.disconnect()
                except TypeError: pass
                try: self.processing_worker.status_signal.disconnect()
                except TypeError: pass
                # ... ng·∫Øt k·∫øt n·ªëi c√°c t√≠n hi·ªáu kh√°c ...
            self.processing_worker = None # Reset worker c≈©

            # D·ªçn s·∫°ch frame c≈© trong queue tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu worker m·ªõi
            cleared_count = 0
            while not self.frame_queue.empty():
                try: self.frame_queue.get_nowait(); cleared_count += 1
                except Empty: break
            if cleared_count > 0: self.log_activity(f"‚ÑπÔ∏è ƒê√£ d·ªçn {cleared_count} frame c≈© kh·ªèi queue.")

            # T·∫°o v√† kh·ªüi ch·∫°y worker M·ªöI
            self.processing_worker = ProcessingWorker(
                self.frame_queue,
                self.get_reference_data_for_worker, # Func cung c·∫•p ·∫£nh SSIM/rules YOLO
                self.get_current_config_for_worker, # Func cung c·∫•p config c·∫ßn thi·∫øt
                compare_func                        # H√†m so s√°nh c·ª• th·ªÉ (SSIM/YOLO)
            )
            # K·∫øt n·ªëi t√≠n hi·ªáu t·ª´ worker m·ªõi ƒë·∫øn c√°c slot c·ªßa Main thread (self)
            self.processing_worker.log_signal.connect(self.log_activity)
            self.processing_worker.status_signal.connect(self.update_status_label)
            self.processing_worker.save_error_signal.connect(self.save_error_image_from_thread)
            self.processing_worker.comparison_details_signal.connect(self.update_details_display)
            self.processing_worker.error_detected_signal.connect(self._mark_error_occurred)
            self.processing_worker.serial_command_signal.connect(self._send_serial_command)

            # B·∫Øt ƒë·∫ßu lu·ªìng worker
            self.processing_worker.last_error_time = 0 # Reset cooldown l·ªói trong worker
            self.processing_worker.start() # Ch·∫°y h√†m run() c·ªßa worker

            # C·∫≠p nh·∫≠t UI tr·∫°ng th√°i b·∫Øt ƒë·∫ßu
            # ƒê·∫∑t tr·∫°ng th√°i ban ƒë·∫ßu l√† Unknown ho·∫∑c tr·∫°ng th√°i ch·ªù x·ª≠ l√Ω frame ƒë·∫ßu ti√™n
            self.update_status_label(ComparisonStatus.UNKNOWN, {"status": "Starting..."})
            self.details_label.setText("Details: Waiting for first frame...")

            # B·∫Øt ƒë·∫ßu timer h·∫πn gi·ªù ch·∫°y (n·∫øu c√≥ c·∫•u h√¨nh > 0 ph√∫t)
            if self._current_runtime_minutes > 0:
                duration_ms = self._current_runtime_minutes * 60 * 1000
                self.runtime_timer.start(duration_ms)
                self.log_activity(f"‚è±Ô∏è H·∫πn gi·ªù t·ª± ƒë·ªông d·ª´ng sau {self._current_runtime_minutes} ph√∫t.")
            else: # ƒê·∫£m b·∫£o timer ƒë√£ d·ª´ng n·∫øu kh√¥ng d√πng
                if self.runtime_timer.isActive(): self.runtime_timer.stop()

            # Reset tr·∫°ng th√°i ghi video
            self.video_writer = None; self.current_video_path = None
            self.error_occurred_during_recording = False # Reset c·ªù l·ªói video

        else:
            # --- LOGIC D·ª™NG X·ª¨ L√ù ---
            self.log_activity("‚èπ ƒêang y√™u c·∫ßu d·ª´ng x·ª≠ l√Ω...")
            # G·ª≠i t√≠n hi·ªáu d·ª´ng cho worker (n·∫øu ƒëang ch·∫°y)
            if self.processing_worker and self.processing_worker.isRunning():
                self.processing_worker.stop()
                # Worker s·∫Ω t·ª± k·∫øt th√∫c khi bi·∫øn self.running=False
                # Kh√¥ng c·∫ßn ch·ªù (wait) ·ªü ƒë√¢y ƒë·ªÉ tr√°nh treo UI n·∫øu worker c√≥ v·∫•n ƒë·ªÅ

            # D·ª´ng timer h·∫πn gi·ªù n·∫øu ƒëang ch·∫°y
            if self.runtime_timer.isActive():
                self.runtime_timer.stop()
                self.log_activity("‚è±Ô∏è ƒê√£ h·ªßy h·∫πn gi·ªù d·ª´ng.")

            # --- Ho√†n t·∫•t vi·ªác ghi video (n·∫øu ƒëang ghi) ---
            self._finalize_video_recording()

            # C·∫≠p nh·∫≠t UI tr·∫°ng th√°i d·ª´ng
            self.update_status_label(ComparisonStatus.UNKNOWN, {"status": "Stopped"}) # ƒê·∫∑t v·ªÅ tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh
            self.details_label.setText("Details: N/A") # Reset chi ti·∫øt

            self.log_activity("‚èπ Qu√° tr√¨nh x·ª≠ l√Ω ƒë√£ ƒë∆∞·ª£c y√™u c·∫ßu d·ª´ng.")

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i enable/disable c·ªßa c√°c n√∫t v√† style n√∫t Start/Stop
        self._update_controls_state()
        self.update_toggle_button_text()


    @QtCore.pyqtSlot()
    def _mark_error_occurred(self):
        """Slot ƒë∆∞·ª£c g·ªçi b·ªüi worker khi ph√°t hi·ªán l·ªói ƒë·∫ßu ti√™n trong phi√™n ghi video."""
        # Ch·ªâ log l·∫ßn ƒë·∫ßu ti√™n ƒë√°nh d·∫•u l·ªói
        if self._record_on_error_enabled and not self.error_occurred_during_recording:
            self.log_activity("‚ùóÔ∏è Ph√°t hi·ªán l·ªói ƒë·∫ßu ti√™n trong phi√™n x·ª≠ l√Ω. Video s·∫Ω ƒë∆∞·ª£c l∆∞u khi d·ª´ng.")
        # ƒê√°nh d·∫•u l√† ƒë√£ c√≥ l·ªói (d√πng ƒë·ªÉ quy·∫øt ƒë·ªãnh x√≥a hay gi·ªØ video cu·ªëi)
        self.error_occurred_during_recording = True

    def _finalize_video_recording(self):
        """ƒê√≥ng file video ƒëang ghi v√† x·ª≠ l√Ω (l∆∞u ho·∫∑c x√≥a)."""
        if self.video_writer is not None:
            vp = self.current_video_path # L∆∞u ƒë∆∞·ªùng d·∫´n tr∆∞·ªõc khi release
            try:
                self.video_writer.release() # ƒê√≥ng file video
                self.log_activity("‚ö™Ô∏è ƒê√£ d·ª´ng ghi video.")
                # X·ª≠ l√Ω file video cu·ªëi c√πng
                if vp and os.path.exists(vp):
                    if not self.error_occurred_during_recording: # Kh√¥ng c√≥ l·ªói n√†o x·∫£y ra -> x√≥a
                         try:
                             os.remove(vp); self.log_activity(f"üóëÔ∏è ƒê√£ x√≥a video (v√¨ kh√¥ng c√≥ l·ªói): {os.path.basename(vp)}")
                         except Exception as e_rem:
                             self.log_activity(f"‚ö†Ô∏è L·ªói khi x√≥a video kh√¥ng l·ªói '{os.path.basename(vp)}': {e_rem}")
                    else: # C√≥ l·ªói ƒë√£ x·∫£y ra -> gi·ªØ l·∫°i file video
                         self.log_activity(f"üíæ ƒê√£ l∆∞u video c√≥ l·ªói: {os.path.basename(vp)}")
            except Exception as e_vid_rel:
                self.log_activity(f"‚ùå L·ªói khi gi·∫£i ph√≥ng VideoWriter: {e_vid_rel}")
            finally:
                # Reset tr·∫°ng th√°i ghi video d√π th√†nh c√¥ng hay l·ªói
                self.video_writer = None; self.current_video_path = None
                self.error_occurred_during_recording = False # Reset c·ªù


    @QtCore.pyqtSlot()
    def _runtime_timer_timeout(self):
        """Slot ƒë∆∞·ª£c g·ªçi khi timer h·∫πn gi·ªù ch·∫°y k·∫øt th√∫c."""
        if self._current_runtime_minutes > 0:
             self.log_activity(f"‚è±Ô∏è ƒê√£ h·∫øt th·ªùi gian ch·∫°y ({self._current_runtime_minutes} ph√∫t).")
             QMessageBox.information(self,"H·∫øt Gi·ªù",f"ƒê√£ ch·∫°y ƒë·ªß {self._current_runtime_minutes} ph√∫t. ·ª®ng d·ª•ng s·∫Ω t·ª± ƒë·ªông d·ª´ng x·ª≠ l√Ω.")
             # T·ª± ƒë·ªông d·ª´ng x·ª≠ l√Ω n·∫øu ƒëang ch·∫°y
             if self.processing:
                  self.toggle_processing() # G·ªçi h√†m d·ª´ng chu·∫©n
             # C√¢n nh·∫Øc c√≥ n√™n t·ª± ƒë·ªông ƒë√≥ng ·ª©ng d·ª•ng kh√¥ng?
             # Hi·ªán t·∫°i: Ch·ªâ d·ª´ng x·ª≠ l√Ω.
             # self.close_application() # B·ªè comment d√≤ng n√†y n·∫øu mu·ªën t·ª± ƒë√≥ng
        else:
             # Tr∆∞·ªùng h·ª£p l·∫°: timer timeout nh∆∞ng runtime l√† 0
             self.log_activity("‚ÑπÔ∏è Timer h·∫πn gi·ªù timeout nh∆∞ng kh√¥ng c√≥ th·ªùi gian ch·∫°y ƒë∆∞·ª£c c·∫•u h√¨nh.")

    # --- Comparison Strategies ---
    def compare_ssim_strategy(self, frame, ref_images, config):
        """
        Chi·∫øn l∆∞·ª£c so s√°nh d√πng SSIM.
        So s√°nh frame v·ªõi ·∫£nh Norm, Shutdown, Fail.
        Tr·∫£ v·ªÅ: (ComparisonStatus, details_dict)
        """
        ssim_th = config.get('ssim_threshold', DEFAULT_SSIM_THRESHOLD) # L·∫•y ng∆∞·ª°ng t·ª´ config
        n_img = ref_images.get(REF_NORM)
        s_img = ref_images.get(REF_SHUTDOWN)
        f_img = ref_images.get(REF_FAIL)
        details = {} # Dictionary ƒë·ªÉ tr·∫£ v·ªÅ c√°c score SSIM

        # 1. B·∫Øt bu·ªôc ph·∫£i c√≥ ·∫£nh Norm
        if not isinstance(n_img, np.ndarray) or n_img.size == 0:
            return ComparisonStatus.ERROR, {"error": "·∫¢nh Norm (SSIM) kh√¥ng h·ª£p l·ªá"}

        # 2. T√≠nh SSIM v·ªõi ·∫£nh Norm
        score_n = ssim_opencv(frame, n_img)
        details["ssim_norm"] = score_n # Lu√¥n th√™m score Norm v√†o details (k·ªÉ c·∫£ khi None)

        if score_n is None: # L·ªói khi t√≠nh SSIM v·ªõi Norm
            return ComparisonStatus.ERROR, {"error": "L·ªói t√≠nh SSIM v·ªõi ·∫£nh Norm", **details}
        elif score_n >= ssim_th: # N·∫øu kh·ªõp ·∫£nh Norm -> Tr·∫°ng th√°i NORMAL
            return ComparisonStatus.NORMAL, details

        # 3. N·∫øu kh√¥ng kh·ªõp Norm, t√≠nh SSIM v·ªõi ·∫£nh Shutdown (n·∫øu c√≥)
        score_s = None
        if isinstance(s_img, np.ndarray) and s_img.size > 0:
            score_s = ssim_opencv(frame, s_img)
            details["ssim_shutdown"] = score_s # Th√™m score Shutdown
            if score_s is not None and score_s >= ssim_th:
                # Kh·ªõp ·∫£nh Shutdown -> Tr·∫°ng th√°i SHUTDOWN
                return ComparisonStatus.SHUTDOWN, details

        # 4. N·∫øu kh√¥ng kh·ªõp Norm/Shutdown, t√≠nh SSIM v·ªõi ·∫£nh Fail (n·∫øu c√≥)
        score_f = None
        if isinstance(f_img, np.ndarray) and f_img.size > 0:
            score_f = ssim_opencv(frame, f_img)
            details["ssim_fail"] = score_f # Th√™m score Fail
            if score_f is not None and score_f >= ssim_th:
                # Kh·ªõp ·∫£nh Fail -> Tr·∫°ng th√°i FAIL
                return ComparisonStatus.FAIL, details

        # 5. N·∫øu kh√¥ng kh·ªõp b·∫•t k·ª≥ ·∫£nh n√†o -> Tr·∫°ng th√°i UNKNOWN
        return ComparisonStatus.UNKNOWN, details


    def compare_yolo_strategy(self, frame, yolo_rules, config):
        """
        Chi·∫øn l∆∞·ª£c so s√°nh d√πng YOLOv8.
        D·ª± ƒëo√°n ƒë·ªëi t∆∞·ª£ng tr√™n frame v√† ki·ªÉm tra v·ªõi b·ªô quy t·∫Øc (yolo_rules).
        Tr·∫£ v·ªÅ: (ComparisonStatus, details_dict)
        """
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
        if not YOLO_AVAILABLE or self.yolo_model is None:
            return ComparisonStatus.ERROR, {"error": "YOLO kh√¥ng s·∫µn s√†ng (ch∆∞a c√†i/ch∆∞a t·∫£i model)"}
        conf_threshold = config.get('yolo_confidence', DEFAULT_YOLO_CONFIDENCE) # L·∫•y ng∆∞·ª°ng conf t·ª´ config

        try:
            # === Th·ª±c hi·ªán d·ª± ƒëo√°n YOLO ===
            # verbose=False: T·∫Øt log m·∫∑c ƒë·ªãnh c·ªßa ultralytics
            # imgsz c√≥ th·ªÉ gi√∫p chu·∫©n h√≥a k√≠ch th∆∞·ªõc ƒë·∫ßu v√†o model
            predict_start = time.time()
            results = self.yolo_model.predict(frame, conf=conf_threshold, verbose=False, imgsz=640) # imgsz=640 l√† k√≠ch th∆∞·ªõc ph·ªï bi·∫øn
            predict_time = time.time() - predict_start

            # Ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ
            if not results or len(results) == 0:
                 return ComparisonStatus.ERROR, {"error": "YOLO predict kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£"}

            # === Tr√≠ch xu·∫•t th√¥ng tin d·ª± ƒëo√°n ===
            detections = results[0] # L·∫•y k·∫øt qu·∫£ cho ·∫£nh ƒë·∫ßu ti√™n (v√† duy nh·∫•t trong batch=1)
            detected_objects = {}   # Dictionary ƒë·∫øm s·ªë l∆∞·ª£ng {class_name: count}
            # object_details_list = [] # T√πy ch·ªçn: list chi ti·∫øt t·ª´ng bounding box
            obj_count = 0           # T·ªïng s·ªë ƒë·ªëi t∆∞·ª£ng ph√°t hi·ªán ƒë∆∞·ª£c

            # Ki·ªÉm tra xem c√≥ h·ªôp gi·ªõi h·∫°n n√†o ƒë∆∞·ª£c ph√°t hi·ªán kh√¥ng
            if detections.boxes is not None and detections.names is not None:
                 obj_count = len(detections.boxes) # S·ªë l∆∞·ª£ng h·ªôp gi·ªõi h·∫°n
                 class_names_map = detections.names # Mapping t·ª´ class_id sang class_name

                 # L·∫∑p qua t·ª´ng h·ªôp gi·ªõi h·∫°n ph√°t hi·ªán ƒë∆∞·ª£c
                 for i in range(obj_count):
                     try:
                         box = detections.boxes[i] # L·∫•y ƒë·ªëi t∆∞·ª£ng box theo index
                         # L·∫•y class_id v√† confidence, ƒë·∫£m b·∫£o chuy·ªÉn sang ki·ªÉu Python chu·∫©n
                         class_id = int(box.cls.item())
                         confidence = float(box.conf.item())
                         # L·∫•y t√™n class t·ª´ map, n·∫øu kh√¥ng c√≥ d√πng ID
                         class_name = class_names_map.get(class_id, f"ID_{class_id}")

                         # --- ƒê·∫øm s·ªë l∆∞·ª£ng theo class name ---
                         detected_objects[class_name] = detected_objects.get(class_name, 0) + 1

                         # --- T√πy ch·ªçn: Tr√≠ch xu·∫•t th√™m chi ti·∫øt (v√≠ d·ª•: t·ªça ƒë·ªô box) ---
                         # bbox_xywhn = box.xywhn.cpu().numpy()[0] # T·ªça ƒë·ªô chu·∫©n h√≥a [x_center, y_center, width, height]
                         # object_details_list.append({
                         #     "class": class_name, "conf": confidence,
                         #     "box_norm": [round(c, 4) for c in bbox_xywhn]
                         # })

                     except Exception as box_err:
                          # Log l·ªói x·ª≠ l√Ω m·ªôt box c·ª• th·ªÉ m√† kh√¥ng d·ª´ng to√†n b·ªô
                          # D√πng print t·∫°m th·ªùi, ho·∫∑c log_signal n·∫øu mu·ªën ƒë∆∞a v√†o log ch√≠nh
                          print(f"Warning: L·ªói x·ª≠ l√Ω YOLO box th·ª© {i}: {box_err}")
                          continue # B·ªè qua box b·ªã l·ªói n√†y

            # T·∫°o dictionary chi ti·∫øt k·∫øt qu·∫£ ƒë·ªÉ tr·∫£ v·ªÅ
            details = {"detected": detected_objects, "count": obj_count}
            # Th√™m th·ªùi gian d·ª± ƒëo√°n v√†o details n·∫øu mu·ªën theo d√µi hi·ªáu nƒÉng
            # details["predict_time_ms"] = round(predict_time * 1000)
            # if object_details_list: details["boxes"] = object_details_list # Th√™m chi ti·∫øt box n·∫øu c·∫ßn

            # === √Åp d·ª•ng quy t·∫Øc ƒë√£ ƒë·ªãnh nghƒ©a trong yolo_rules ===
            # L·∫•y c√°c b·ªô quy t·∫Øc t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng tr·∫°ng th√°i
            norm_rules = yolo_rules.get(REF_NORM, {})
            shut_rules = yolo_rules.get(REF_SHUTDOWN, {})
            fail_rules = yolo_rules.get(REF_FAIL, {})

            # --- ∆Øu ti√™n ki·ªÉm tra: FAIL -> SHUTDOWN -> NORMAL ---
            # Ki·ªÉm tra quy t·∫Øc FAIL
            is_fail, fail_reason = self._check_yolo_rule(detected_objects, fail_rules)
            if is_fail:
                details["reason"] = fail_reason # Th√™m l√Ω do kh·ªõp FAIL
                return ComparisonStatus.FAIL, details

            # Ki·ªÉm tra quy t·∫Øc SHUTDOWN
            is_shut, shut_reason = self._check_yolo_rule(detected_objects, shut_rules)
            if is_shut:
                details["reason"] = shut_reason # Th√™m l√Ω do kh·ªõp SHUTDOWN
                return ComparisonStatus.SHUTDOWN, details

            # Ki·ªÉm tra quy t·∫Øc NORMAL
            is_norm, norm_reason = self._check_yolo_rule(detected_objects, norm_rules)
            if is_norm:
                details["reason"] = norm_reason # Th√™m l√Ω do kh·ªõp NORMAL
                return ComparisonStatus.NORMAL, details

            # --- N·∫øu kh√¥ng kh·ªõp v·ªõi b·∫•t k·ª≥ quy t·∫Øc n√†o ---
            details["reason"] = "Kh√¥ng kh·ªõp quy t·∫Øc (Fail/Shutdown/Norm)"
            return ComparisonStatus.UNKNOWN, details

        except Exception as e:
            # B·∫Øt l·ªói chung trong qu√° tr√¨nh d·ª± ƒëo√°n ho·∫∑c x·ª≠ l√Ω k·∫øt qu·∫£ YOLO
            err_msg = f"L·ªói x·ª≠ l√Ω YOLO: {type(e).__name__}: {e}"
            print(f"üí• {err_msg}") # In ra console ƒë·ªÉ debug nhanh
            print(traceback.format_exc())    # In traceback ƒë·∫ßy ƒë·ªß
            # Tr·∫£ v·ªÅ tr·∫°ng th√°i ERROR
            return ComparisonStatus.ERROR, {"error": err_msg}


    def _check_yolo_rule(self, detected_objects, rules):
        """
        Ki·ªÉm tra xem c√°c ƒë·ªëi t∆∞·ª£ng ph√°t hi·ªán (detected_objects dict) c√≥ kh·ªõp v·ªõi
        b·ªô quy t·∫Øc (rules dict) kh√¥ng.
        Tr·∫£ v·ªÅ: (bool: True n·∫øu kh·ªõp, False n·∫øu kh√¥ng, str: L√Ω do kh·ªõp/kh√¥ng kh·ªõp)
        """
        # N·∫øu kh√¥ng c√≥ quy t·∫Øc n√†o -> coi nh∆∞ kh√¥ng kh·ªõp
        if not rules: return False, "Kh√¥ng c√≥ quy t·∫Øc ƒë·ªÉ ki·ªÉm tra"

        reasons_violated = [] # Ch·ªâ l∆∞u l√Ω do vi ph·∫°m quy t·∫Øc
        match_overall = True # Gi·∫£ ƒë·ªãnh l√† kh·ªõp ban ƒë·∫ßu

        # --- Ki·ªÉm tra c√°c lo·∫°i quy t·∫Øc (c√≥ th·ªÉ k·∫øt h·ª£p) ---

        # 1. "any_of": Y√™u c·∫ßu c√≥ m·∫∑t √çT NH·∫§T M·ªòT ƒë·ªëi t∆∞·ª£ng trong danh s√°ch n√†y.
        #    Th∆∞·ªùng d√πng cho tr·∫°ng th√°i FAIL (ph√°t hi·ªán b·∫•t k·ª≥ d·∫•u hi·ªáu l·ªói n√†o).
        any_of_list = rules.get("any_of")
        if isinstance(any_of_list, list) and any_of_list:
            found_any = False
            matching_obj = None
            for obj_name in any_of_list:
                if detected_objects.get(obj_name, 0) > 0: # Ki·ªÉm tra s·ªë l∆∞·ª£ng > 0
                    found_any = True
                    matching_obj = obj_name # Ghi l·∫°i ƒë·ªëi t∆∞·ª£ng ƒë·∫ßu ti√™n kh·ªõp
                    break # T√¨m th·∫•y 1 l√† ƒë·ªß
            if not found_any:
                # N·∫øu "any_of" l√† quy t·∫Øc duy nh·∫•t -> kh√¥ng kh·ªõp
                # N·∫øu k·∫øt h·ª£p v·ªõi quy t·∫Øc kh√°c, ch∆∞a ch·∫Øc ƒë√£ vi ph·∫°m t·ªïng th·ªÉ
                 if len(rules) == 1:
                      match_overall = False
                      reasons_violated.append(f"Thi·∫øu m·ªôt trong 'any_of': {', '.join(any_of_list)}")
                 # else: kh√¥ng vi ph·∫°m ngay, ƒë·ªÉ c√°c quy t·∫Øc kh√°c quy·∫øt ƒë·ªãnh
            else:
                # N·∫øu t√¨m th·∫•y 1 ƒë·ªëi t∆∞·ª£ng trong "any_of"
                # v√† "any_of" l√† quy t·∫Øc DUY NH·∫§T -> Kh·ªõp ngay l·∫≠p t·ª©c
                 if len(rules) == 1:
                      return True, f"T√¨m th·∫•y '{matching_obj}' (t·ª´ 'any_of')"
                # N·∫øu c√≤n quy t·∫Øc kh√°c, ghi nh·∫≠n l√† ƒë√£ kh·ªõp ph·∫ßn "any_of" (kh√¥ng th√™m v√†o reasons_violated)

        # N·∫øu ch·ªâ c√≥ 'any_of' v√† n√≥ kh√¥ng kh·ªõp, tr·∫£ v·ªÅ False lu√¥n
        if len(rules) == 1 and 'any_of' in rules and not match_overall:
             return False, "; ".join(reasons_violated)

        # 2. "required_objects" / "min_counts": C√°c ƒë·ªëi t∆∞·ª£ng B·∫ÆT BU·ªòC ph·∫£i c√≥ v√† ƒë·ªß s·ªë l∆∞·ª£ng t·ªëi thi·ªÉu.
        required_list = rules.get("required_objects")
        min_counts_dict = rules.get("min_counts", {}) # C√≥ th·ªÉ k·∫øt h·ª£p v·ªõi required_list ho·∫∑c d√πng ƒë·ªôc l·∫≠p
        check_targets = set() # T·∫≠p h·ª£p c√°c ƒë·ªëi t∆∞·ª£ng c·∫ßn ki·ªÉm tra min_count
        if isinstance(required_list, list): check_targets.update(required_list)
        check_targets.update(min_counts_dict.keys()) # Th√™m c√°c key t·ª´ min_counts

        if check_targets:
            rule_violated = False
            temp_reasons = []
            for req_obj in check_targets:
                 req_count = min_counts_dict.get(req_obj, 1 if req_obj in (required_list or []) else 0) # C·∫ßn >= 1 n·∫øu trong required_list, ng∆∞·ª£c l·∫°i t√πy min_counts
                 actual_count = detected_objects.get(req_obj, 0)
                 if actual_count < req_count:
                     rule_violated = True
                     temp_reasons.append(f"Thi·∫øu '{req_obj}' (c·∫ßn {req_count}, c√≥ {actual_count})")
            if rule_violated:
                match_overall = False
                reasons_violated.extend(temp_reasons)

        # 3. "forbidden_objects": C√°c ƒë·ªëi t∆∞·ª£ng KH√îNG ƒê∆Ø·ª¢C PH√âP xu·∫•t hi·ªán.
        forbidden_list = rules.get("forbidden_objects")
        if isinstance(forbidden_list, list) and forbidden_list:
            rule_violated = False
            temp_reasons = []
            for fob_obj in forbidden_list:
                if detected_objects.get(fob_obj, 0) > 0:
                    rule_violated = True
                    temp_reasons.append(f"Ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng c·∫•m '{fob_obj}'")
            if rule_violated:
                match_overall = False
                reasons_violated.extend(temp_reasons)

        # 4. "max_total_objects": Gi·ªõi h·∫°n T·ªîNG s·ªë ƒë·ªëi t∆∞·ª£ng T·ªêI ƒêA ƒë∆∞·ª£c ph√©p.
        max_total = rules.get("max_total_objects")
        # Ch·ªâ ki·ªÉm tra n·∫øu max_total l√† s·ªë kh√¥ng √¢m
        if isinstance(max_total, (int, float)) and max_total >= 0:
            current_total = sum(detected_objects.values()) # T·ªïng t·∫•t c·∫£ ƒë·ªëi t∆∞·ª£ng ph√°t hi·ªán
            if current_total > max_total:
                match_overall = False
                reasons_violated.append(f"Qu√° nhi·ªÅu ƒë·ªëi t∆∞·ª£ng (t·ªëi ƒëa {int(max_total)}, c√≥ {current_total})")

        # 5. "exact_total_objects": Y√™u c·∫ßu CH√çNH X√ÅC T·ªîNG s·ªë ƒë·ªëi t∆∞·ª£ng.
        exact_total = rules.get("exact_total_objects")
        # Ch·ªâ ki·ªÉm tra n·∫øu exact_total l√† s·ªë kh√¥ng √¢m
        if isinstance(exact_total, (int, float)) and exact_total >= 0:
            current_total = sum(detected_objects.values())
            if current_total != exact_total:
                match_overall = False
                reasons_violated.append(f"Sai t·ªïng s·ªë ƒë·ªëi t∆∞·ª£ng (c·∫ßn {int(exact_total)}, c√≥ {current_total})")

        # --- K·∫øt lu·∫≠n cu·ªëi c√πng ---
        if match_overall:
             # N·∫øu kh√¥ng c√≥ l√Ω do vi ph·∫°m n√†o ƒë∆∞·ª£c ghi l·∫°i -> kh·ªõp
             if not reasons_violated:
                  # L√Ω do kh·ªõp c√≥ th·ªÉ l√† "T·∫•t c·∫£ quy t·∫Øc kh·ªõp" ho·∫∑c l√Ω do t·ª´ 'any_of' n·∫øu ƒë√≥ l√† quy t·∫Øc duy nh·∫•t
                  match_reason = "T·∫•t c·∫£ quy t·∫Øc kh·ªõp"
                  if len(rules) == 1 and 'any_of' in rules and isinstance(any_of_list, list):
                      # T√¨m l·∫°i ƒë·ªëi t∆∞·ª£ng ƒë√£ kh·ªõp 'any_of'
                      for obj_name in any_of_list:
                           if detected_objects.get(obj_name, 0) > 0:
                                match_reason = f"T√¨m th·∫•y '{obj_name}' (t·ª´ 'any_of')"
                                break
                  return True, match_reason
             else:
                 # Tr∆∞·ªùng h·ª£p l·∫°: match_overall l√† True nh∆∞ng l·∫°i c√≥ reasons_violated? -> Coi nh∆∞ kh√¥ng kh·ªõp
                  return False, "; ".join(reasons_violated) or "Kh√¥ng kh·ªõp quy t·∫Øc kh√¥ng x√°c ƒë·ªãnh"
        else:
            # N·∫øu match_overall l√† False -> kh√¥ng kh·ªõp, tr·∫£ v·ªÅ l√Ω do vi ph·∫°m
            return False, "; ".join(reasons_violated) or "Kh√¥ng kh·ªõp quy t·∫Øc kh√¥ng x√°c ƒë·ªãnh"


    # --- Image Saving ---
    @QtCore.pyqtSlot(np.ndarray, str)
    def save_error_image_from_thread(self, frame_copy, file_path):
        """L∆∞u ·∫£nh l·ªói (ƒë∆∞·ª£c g·ª≠i t·ª´ worker) v√†o file trong lu·ªìng ch√≠nh."""
        try:
            # L·∫•y th∆∞ m·ª•c t·ª´ ƒë∆∞·ªùng d·∫´n file
            save_dir = os.path.dirname(file_path)
            # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i tr∆∞·ªõc khi l∆∞u (an to√†n h∆°n)
            if save_dir and not os.path.exists(save_dir):
                 os.makedirs(save_dir, exist_ok=True)

            # S·ª≠ d·ª•ng imencode ƒë·ªÉ x·ª≠ l√Ω ƒë·ªãnh d·∫°ng PNG v√† t√πy ch·ªçn n√©n
            # M·ª©c n√©n PNG t·ª´ 0 (kh√¥ng n√©n) ƒë·∫øn 9 (n√©n cao nh·∫•t, ch·∫≠m h∆°n)
            encode_param = [cv2.IMWRITE_PNG_COMPRESSION, 3] # M·ª©c n√©n 3 (c√¢n b·∫±ng t·ªët)
            success, buf = cv2.imencode('.png', frame_copy, encode_param)
            if not success or buf is None:
                raise ValueError("cv2.imencode th·∫•t b·∫°i khi m√£ h√≥a ·∫£nh PNG.")

            # Ghi buffer ƒë√£ m√£ h√≥a v√†o file (an to√†n v·ªõi ƒë∆∞·ªùng d·∫´n Unicode)
            with open(file_path, "wb") as f:
                f.write(buf.tobytes())
            # Log th√†nh c√¥ng
            self.log_activity(f"üíæ L∆∞u ·∫£nh l·ªói: {os.path.basename(file_path)}")

        except Exception as e:
            # Log l·ªói n·∫øu l∆∞u th·∫•t b·∫°i
            self.log_activity(f"‚ùå L·ªói khi l∆∞u ·∫£nh l·ªói '{os.path.basename(file_path)}': {e}")
            # Ghi traceback ƒë·ªÉ debug d·ªÖ h∆°n (v√¨ ƒë√¢y l√† lu·ªìng ch√≠nh)
            self.log_activity(traceback.format_exc())


    # --- Application Closing ---
    def close_application(self):
        """ƒê√≥ng ·ª©ng d·ª•ng m·ªôt c√°ch an to√†n (ƒë∆∞·ª£c g·ªçi b·ªüi n√∫t Exit)."""
        self.log_activity("üö™ ƒêang y√™u c·∫ßu ƒë√≥ng ·ª©ng d·ª•ng...")
        self.close() # K√≠ch ho·∫°t s·ª± ki·ªán closeEvent c·ªßa QMainWindow

    def closeEvent(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng c·ª≠a s·ªï, d·ªçn d·∫πp t√†i nguy√™n tr∆∞·ªõc khi tho√°t."""
        # X√°c nh·∫≠n l·∫ßn cu·ªëi tr∆∞·ªõc khi ƒë√≥ng? (T√πy ch·ªçn)
        # reply = QMessageBox.question(self, 'X√°c nh·∫≠n tho√°t', 'B·∫°n c√≥ ch·∫Øc mu·ªën ƒë√≥ng ·ª©ng d·ª•ng?',
        #                            QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        # if reply == QMessageBox.No:
        #     event.ignore() # H·ªßy s·ª± ki·ªán ƒë√≥ng
        #     return

        self.log_activity("üö™ B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªçn d·∫πp tr∆∞·ªõc khi ƒë√≥ng...")

        # 1. D·ª´ng c√°c Timers
        if self.runtime_timer.isActive(): self.runtime_timer.stop(); self.log_activity("‚è±Ô∏è Timer h·∫πn gi·ªù ƒë√£ d·ª´ng.")
        if self.frame_timer.isActive(): self.frame_timer.stop(); self.log_activity("‚è±Ô∏è Timer ƒë·ªçc frame ƒë√£ d·ª´ng.")

        # 2. D·ª´ng Worker thread (n·∫øu ƒëang ch·∫°y)
        worker_stopped_cleanly = True
        if self.processing_worker and self.processing_worker.isRunning():
            self.log_activity("‚öôÔ∏è Y√™u c·∫ßu d·ª´ng lu·ªìng x·ª≠ l√Ω...")
            self.processing_worker.stop()
            # Ch·ªù worker d·ª´ng m·ªôt ch√∫t (kh√¥ng n√™n ch·ªù qu√° l√¢u ƒë·ªÉ tr√°nh treo UI)
            if not self.processing_worker.wait(2000): # Ch·ªù t·ªëi ƒëa 2 gi√¢y
                self.log_activity("‚ö†Ô∏è Lu·ªìng x·ª≠ l√Ω kh√¥ng d·ª´ng k·ªãp th·ªùi! C√≥ th·ªÉ c·∫ßn ƒë√≥ng c·ª©ng.")
                worker_stopped_cleanly = False
            else: self.log_activity("‚úÖ Lu·ªìng x·ª≠ l√Ω ƒë√£ d·ª´ng.")
        # ƒê·∫∑t l·∫°i c·ªù processing d√π worker c√≥ d·ª´ng h·∫≥n hay kh√¥ng
        self.processing = False

        # 3. Gi·∫£i ph√≥ng Webcam
        if self.cap and self.cap.isOpened():
            self.log_activity("üö´ ƒêang gi·∫£i ph√≥ng webcam...")
            try: self.cap.release()
            except Exception as e_cap: self.log_activity(f"‚ö†Ô∏è L·ªói khi gi·∫£i ph√≥ng webcam: {e_cap}")
            finally: self.cap = None; self.log_activity("üö´ Webcam ƒë√£ gi·∫£i ph√≥ng.")

        # 4. Ho√†n t·∫•t ghi Video (n·∫øu ƒëang ghi)
        self._finalize_video_recording() # G·ªçi h√†m d·ªçn d·∫πp video

        # 5. ƒê√≥ng c·ªïng Serial (n·∫øu ƒëang m·ªü)
        if self.serial_port and self.serial_port.is_open:
            port_name = self.serial_port_name or self.serial_port.name or "N/A"
            self.log_activity(f"üîå ƒêang ƒë√≥ng c·ªïng COM {port_name}...")
            try: self.serial_port.close(); self.log_activity(f"üîå ƒê√£ ƒë√≥ng c·ªïng COM {port_name}.")
            except Exception as e_com: self.log_activity(f"‚ö†Ô∏è L·ªói ƒë√≥ng COM {port_name}: {e_com}")
            finally: self.serial_port = None; self.serial_enabled = False

        # 6. D·ªçn s·∫°ch Queue (n·∫øu c√≤n frame)
        q_size = self.frame_queue.qsize()
        if q_size > 0: self.log_activity(f"‚ÑπÔ∏è D·ªçn {q_size} frame c√≤n l·∫°i trong queue...")
        while not self.frame_queue.empty():
            try: self.frame_queue.get_nowait()
            except Empty: break

        # 7. Gi·∫£i ph√≥ng Model YOLO (n·∫øu ƒë√£ t·∫£i)
        if self.yolo_model is not None:
             self.log_activity("üß† Gi·∫£i ph√≥ng model YOLO...")
             try:
                 del self.yolo_model; self.yolo_model = None
                 # Optional: Clean GPU memory if using CUDA explicitly
                 # import torch; torch.cuda.empty_cache()
             except Exception as e_yolo_del: self.log_activity(f"‚ÑπÔ∏è L·ªói nh·ªè khi gi·∫£i ph√≥ng model YOLO: {e_yolo_del}")

        # 8. L∆∞u c·∫•u h√¨nh l·∫ßn cu·ªëi
        self.log_activity("üíæ L∆∞u c·∫•u h√¨nh cu·ªëi c√πng...")
        try:
            self.save_config()
        except Exception as e_save_final:
             self.log_activity(f"‚ùå L·ªói khi l∆∞u c·∫•u h√¨nh cu·ªëi c√πng: {e_save_final}")

        self.log_activity("üö™ D·ªçn d·∫πp ho√†n t·∫•t. T·∫°m bi·ªát!")

        # Ghi d√≤ng log cu·ªëi v√†o file (sau khi log cu·ªëi c√πng hi·ªÉn th·ªã tr√™n UI)
        if self.log_file_path:
             try:
                 timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
                 # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
                 log_dir = os.path.dirname(self.log_file_path)
                 if log_dir and not os.path.exists(log_dir): os.makedirs(log_dir, exist_ok=True)
                 # Ghi d√≤ng cu·ªëi
                 with open(self.log_file_path, "a", encoding="utf-8") as lf:
                      lf.write(f"---\n{timestamp} - ·ª®ng d·ª•ng ƒë√£ ƒë√≥ng.\n---\n")
             except Exception as e_log_final:
                  # Kh√¥ng l√†m g√¨ n·∫øu l·ªói ghi log cu·ªëi
                  print(f"Note: L·ªói ghi log cu·ªëi v√†o file: {e_log_final}")

        event.accept() # Ch·∫•p nh·∫≠n s·ª± ki·ªán ƒë√≥ng c·ª≠a s·ªï -> ·ª©ng d·ª•ng s·∫Ω tho√°t

# --- Main Execution ---
if __name__ == "__main__":
    # C√†i ƒë·∫∑t thu·ªôc t√≠nh cho ·ª©ng d·ª•ng (HiDPI scaling)
    if hasattr(QtCore.Qt, 'AA_EnableHighDpiScaling'):
         QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)
    if hasattr(QtCore.Qt, 'AA_UseHighDpiPixmaps'):
         QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)

    # Kh·ªüi t·∫°o QApplication
    app = QtWidgets.QApplication(sys.argv)

    # T·∫°o v√† hi·ªÉn th·ªã c·ª≠a s·ªï ch√≠nh
    try:
        window = ImageCheckerApp()
        window.show()
    except Exception as e_init:
        # L·ªói nghi√™m tr·ªçng ngay khi kh·ªüi t·∫°o c·ª≠a s·ªï
        print(f"CRITICAL ERROR during initialization: {e_init}")
        print(traceback.format_exc())
        # Hi·ªÉn th·ªã MessageBox l·ªói n·∫øu c√≥ th·ªÉ
        try:
             msgBox = QMessageBox()
             msgBox.setIcon(QMessageBox.Critical)
             msgBox.setWindowTitle("L·ªói Kh·ªüi T·∫°o")
             msgBox.setText(f"G·∫∑p l·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o ·ª©ng d·ª•ng:\n\n{e_init}\n\nXem chi ti·∫øt l·ªói trong console.")
             msgBox.setStandardButtons(QMessageBox.Ok)
             msgBox.exec_()
        except Exception: pass # B·ªè qua n·∫øu c·∫£ MessageBox c≈©ng l·ªói
        sys.exit(1) # Tho√°t v·ªõi m√£ l·ªói

    # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p s·ª± ki·ªán ch√≠nh c·ªßa Qt
    sys.exit(app.exec_())
